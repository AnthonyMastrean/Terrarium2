<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrganismBase</name>
    </assembly>
    <members>
        <member name="T:OrganismBase.Action">
            <summary>
             <para>
              This class defines common properties for all actions that a creature
              can perform.  These actions include movement, reproduction,
              eating, attacking, etc...
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.Action.organismID">
            <summary>
             The organism ID of the organism initiating the action
            </summary>
        </member>
        <member name="F:OrganismBase.Action.actionID">
            <summary>
             An incremental action ID used to synchronize actions
             with events.
            </summary>
        </member>
        <member name="M:OrganismBase.Action.#ctor(System.String,System.Int32)">
            <summary>
             Creates a new action given an organism's ID and the
             next action ID.  Note that action ID's shouldn't be
             reused.
            </summary>
            <param name="organismID">ID of the owning organism.</param>
            <param name="actionID">Organism Unique ID for this action.</param>
        </member>
        <member name="P:OrganismBase.Action.OrganismID">
            <summary>
             <para>
              The ID of the creature requesting the action.  This will always be the
              GUID/ID for your creature.
             </para>
            </summary>
            <returns>
             System.String of the GUID/ID for the organism requesting the action.
            </returns>
        </member>
        <member name="P:OrganismBase.Action.ActionID">
            <summary>
             <para>
              A number that uniquely identifies this action for the game engine.
              This can be used to profile how many actions your creature is taking
              during its lifetime.  Or it can be used to write a chronology of
              events for debugging purposes.
             </para>
            </summary>
            <returns>
             System.Int32 representing the incremental ID for this action.
            </returns>
        </member>
        <member name="T:OrganismBase.AttackAction">
            <summary>
             <para>
              This class represents a command to attack another creature initiated by the
              BeginAttacking method.  This class can be used to get the target creature
              for the current attack action.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AttackAction.targetAnimal">
            <summary>
             The target animal to attack.
            </summary>
        </member>
        <member name="M:OrganismBase.AttackAction.#ctor(System.String,System.Int32,OrganismBase.AnimalState)">
            <summary>
             Creates a new attack action targeting a specific creature.
            </summary>
            <param name="organismID">Attacking organism's ID</param>
            <param name="actionID">Organism Unique ID for action.</param>
            <param name="targetAnimal">The creature to attack.</param>
        </member>
        <member name="M:OrganismBase.AttackAction.ToString">
            <summary>
             <para>
              A textual representation of the AttackAction object that can be useful in
              debugging your creature's attack code.
             </para>
            </summary>
            <returns>
             System.String for the textual representation of the AttackAction.
            </returns>
        </member>
        <member name="P:OrganismBase.AttackAction.TargetAnimal">
            <summary>
             <para>
              Returns information about the Animal your creature chose to attack by
              using the BeginAttacking method.
             </para>
            </summary>
            <returns>
             AnimalState object for the creature you attacked using the BeginAttacking method.
            </returns>
        </member>
        <member name="T:OrganismBase.DefendAction">
            <summary>
             <para>
              This class represents a command to defend against an attack from another
              creature and is initiated by using the BeginDefending method.  This class
              can be used to get the target creature for the current defend action.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.DefendAction.targetAnimal">
            <summary>
             The target animal to defend against.
            </summary>
        </member>
        <member name="M:OrganismBase.DefendAction.#ctor(System.String,System.Int32,OrganismBase.AnimalState)">
            <summary>
             Creates a new defend action to defend against a particular target
             creature.
            </summary>
            <param name="organismID">Defending organism's ID</param>
            <param name="actionID">Creature Unique ID for action.</param>
            <param name="targetAnimal">The state representing the creature to defend against.</param>
        </member>
        <member name="M:OrganismBase.DefendAction.ToString">
            <summary>
             <para>
              A textual representation of the DefendAction object that can be useful in
              debugging your creature's defense code.
             </para>
            </summary>
            <returns>
             System.String for the textual representation of the DefendAction.
            </returns>
        </member>
        <member name="P:OrganismBase.DefendAction.TargetAnimal">
            <summary>
             <para>
              Returns the Animal your creature chose to defend against by
              using the BeginDefending method.
             </para>
            </summary>
            <returns>
             AnimalState object for the creature you're defending against.
            </returns>
        </member>
        <member name="T:OrganismBase.EatAction">
            <summary>
             <para>
              This class represents a command to eat another creature or plant and is initiated
              by using the BeginEating method.  This class can be used to get the target
              creature for the current eat action.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EatAction.targetOrganism">
            <summary>
             The target organism to eat.
            </summary>
        </member>
        <member name="M:OrganismBase.EatAction.#ctor(System.String,System.Int32,OrganismBase.OrganismState)">
            <summary>
             Create a new eat action to eat a specific organism.
            </summary>
            <param name="organismID">Eating organism's ID</param>
            <param name="actionID">Unique Organism ID for action.</param>
            <param name="targetOrganism">The state representing the organism to eat.</param>
        </member>
        <member name="M:OrganismBase.EatAction.ToString">
            <summary>
             <para>
              A textual representation of the EatAction object that can be useful in
              debugging your creature's eating code.
             </para>
            </summary>
            <returns>
             System.String for the textual representation of the EatAction.
            </returns>
        </member>
        <member name="P:OrganismBase.EatAction.TargetOrganism">
            <summary>
             <para>
              Returns the organism your creature chose to eat by
              using the BeginEating method.
             </para>
            </summary>
            <returns>
             AnimalState object for the creature you're trying to eat.
            </returns>
        </member>
        <member name="T:OrganismBase.MoveToAction">
            <summary>
             <para>
              This class represents a movement command initiated by the BeginMoving method.
              This class can be used to determine the final location and speed that your
              creature is heading during multi-tick movements.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.MoveToAction.moveTo">
            <summary>
             A vector representing the location and speed for the current
             movement action.
            </summary>
        </member>
        <member name="M:OrganismBase.MoveToAction.#ctor(System.String,System.Int32,OrganismBase.MovementVector)">
            <summary>
             Creates a new movement action for an organism.
            </summary>
            <param name="organismID">The ID of the organism the action will work on.</param>
            <param name="actionID">The incremental ID representing this action.</param>
            <param name="moveTo">The movement vector that defines this action.</param>
        </member>
        <member name="M:OrganismBase.MoveToAction.ToString">
            <summary>
             <para>
              A textual representation of the MoveToAction object that can be useful in
              debugging your creature's movement code.
             </para>
            </summary>
            <returns>
             System.String for the textual representation of the MoveToAction.
            </returns>
        </member>
        <member name="P:OrganismBase.MoveToAction.MovementVector">
            <summary>
             <para>
              A MovementVector object representing the current speed and destination
              that was passed to the BeginMoving method.
             </para>
            </summary>
            <returns>
             MovementVector object representing your creature's destination and speed.
            </returns>
        </member>
        <member name="T:OrganismBase.ReproduceAction">
            <summary>
             <para>
              This class represents a command to reproduce and is initiated
              by using the BeginReproducing method.  This class can be used to get the byte
              array representing the DNA or data that will be sent to your creature's
              offspring.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.ReproduceAction.dna">
            <summary>
             A byte array representing the information that will be passed
             from the parent to the child.
            </summary>
        </member>
        <member name="M:OrganismBase.ReproduceAction.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
             Creates a new ReproduceAction that defines information passed to
             a child once a creature has given birth.  This object is held for
             a period of time as the creature incubates before actually being used
             to generate the events for the parent and child creatures.
            </summary>
            <param name="organismID">The unique ID of the parent creature.</param>
            <param name="actionID">The incremental ID representing this action.</param>
            <param name="dna">An array of bytes that is going to be passed to the child.</param>
        </member>
        <member name="P:OrganismBase.ReproduceAction.Dna">
            <summary>
             <para>
              Returns the DNA information that you passed into the BeginReproduction
              method.  This is only a copy of the original DNA since an actual pointer
              to the array could allow the modification of individual elements.  This
              is a small safety measure for using a non read-only type such as an array.
             </para>
            </summary>
            <returns>
             System.Array of type Byte[] representing the DNA passed in the BeginReproduction method.
            </returns>
        </member>
        <member name="T:OrganismBase.Animal">
            <summary>
             This is the class that you derive from when you create an animal.
            </summary>
        </member>
        <member name="T:OrganismBase.Organism">
            <summary>
             <para>
              The Organism class is the base class for the Animal/Plant classes.  It
              contains functionality that is common to both the Animal and the Plant
              class.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.Organism.traceHandler">
            <internal/>
        </member>
        <member name="M:OrganismBase.Organism.#ctor">
            <internal/>
        </member>
        <member name="M:OrganismBase.Organism.Initialize">
            <summary>
            The Initialize method is called immediately after instantiating a new creature.
            The developer should override this method to set up event handlers for the
            creature and do any first time initialization that needs to be done to set
            up member variables.
            </summary>
        </member>
        <member name="M:OrganismBase.Organism.SetWorldBoundary(OrganismBase.IOrganismWorldBoundary)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Organism.DistanceTo(OrganismBase.OrganismState)">
            <summary>
             <para>
              Calculates the linear distance between your creature and another using
              various API's defined by the Vector class.
             </para>
            </summary>
            <param name="organismState">
            The OrganismState object for the creature to
            use when computing linear distance from you're creature.
            </param>
            <returns>
            A System.Double representing the linear distance between your creature and another.
            </returns>
        </member>
        <member name="M:OrganismBase.Organism.BeginReproduction(System.Byte[])">
            <summary>
             <para>
              Use this function to command your creature to reproduce.  There are many
              conditions on whether your creature can reproduce.  If these conditions
              are not met, an exception will be thrown.  The easiest way to make
              sure all pre-existing conditions have been met is to check the CanReproduce
              property.
             </para>
             <para>
              If you call this method multiple times in the same turn, then the last call
              will be used, and all previous calls will be ignored.  This method is also
              asynchronous, and a ReproduceCompletedEvent will be fired when your creature
              has actually given birth.  The time between start and completion is 10 ticks.
             </para>
            </summary>
            <param name="dna">
             A byte array that gets passed to the child.  This can be any information you
             want to pass to the child creature.  The byte array is truncated at 8000 bytes.
            </param>
            <exception cref="T:OrganismBase.AlreadyReproducingException">
             Thrown when your creature is already in the process of reproduction.
            </exception>
            <exception cref="T:OrganismBase.NotMatureException">
             Thrown when your creature is not yet mature and you try to reproduce.
            </exception>
            <exception cref="T:OrganismBase.NotEnoughEnergyException">
             Thrown when your creature does not have enough energy to start reproduction.
            </exception>
            <exception cref="T:OrganismBase.NotReadyToReproduceException">
             Thrown when your creature is not yet ready to reproduce because the appropriate number of ticks has not elapsed.
            </exception>
        </member>
        <member name="M:OrganismBase.Organism.GetThenErasePendingActions">
            <internal/>
        </member>
        <member name="M:OrganismBase.Organism.InternalMain(System.Boolean)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Organism.WriteTrace(System.Object)">
            <summary>
             <para>
              Writes a trace to the Terrarium trace window for debugging.  The Tracing routines
              take a *very* small amount of time if you're not monitoring them.  They are on the
              order of 12 nSec per call.  To meet this performance requirement there are several
              overloads taking a varying number of parameters rather than a single variable argument
              parameter.
             </para>
            </summary>
            <param name="item1">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
        </member>
        <member name="M:OrganismBase.Organism.WriteTrace(System.Object,System.Object)">
            <summary>
             <para>
              Writes a trace to the Terrarium trace window for debugging.  The Tracing routines
              take a *very* small amount of time if you're not monitoring them.  They are on the
              order of 12 nSec per call.  To meet this performance requirement there are several
              overloads taking a varying number of parameters rather than a single variable argument
              parameter.
             </para>
            </summary>
            <param name="item1">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
            <param name="item2">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
        </member>
        <member name="M:OrganismBase.Organism.WriteTrace(System.Object,System.Object,System.Object)">
            <summary>
             <para>
              Writes a trace to the Terrarium trace window for debugging.  The Tracing routines
              take a *very* small amount of time if you're not monitoring them.  They are on the
              order of 12 nSec per call.  To meet this performance requirement there are several
              overloads taking a varying number of parameters rather than a single variable argument
              parameter.
             </para>
            </summary>
            <param name="item1">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
            <param name="item2">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
            <param name="item3">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
        </member>
        <member name="M:OrganismBase.Organism.WriteTrace(System.Object,System.Object,System.Object,System.Object)">
            <summary>
             <para>
              Writes a trace to the Terrarium trace window for debugging.  The Tracing routines
              take a *very* small amount of time if you're not monitoring them.  They are on the
              order of 12 nSec per call.  To meet this performance requirement there are several
              overloads taking a varying number of parameters rather than a single variable argument
              parameter.
             </para>
            </summary>
            <param name="item1">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
            <param name="item2">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
            <param name="item3">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
            <param name="item4">
             An object containing information for the Trace Window.  ToString() will be called on the object.
            </param>
        </member>
        <member name="M:OrganismBase.Organism.InternalOrganismSerialize(System.IO.MemoryStream)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Organism.InternalOrganismDeserialize(System.IO.MemoryStream)">
            <internal/>
        </member>
        <member name="P:OrganismBase.Organism.Trace">
            <internal/>
        </member>
        <member name="P:OrganismBase.Organism.SerializedStream">
            <internal/>
        </member>
        <member name="P:OrganismBase.Organism.OrganismRandom">
            <summary>
             <para>
              To make random actions deterministic the creature should use this Random
              object when in need of a random number or variable in the creature's code.
              This can help aid in debugging so that strange behavior can be reproduced.
             </para>
            </summary>
            <returns>
            System.Random object initialized by the Organism class.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.Position">
            <summary>
             <para>
              Each creature is centered in the game world to a specific point.  The
              Position property can be used to query for this location.
             </para>
            </summary>
            <returns>
            System.Drawing.Point object initialized to the organisms current
            location in the game world.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.State">
            <summary>
             <para>
              Gets the OrganismState object representing your creature's current state in the world.
              The OrganismState object contains all of the properties that specify your organism's
              existence with properties like: Position, EnergyState, PercentInjured, etc...
             </para>
            </summary>
            <returns>
            An OrganismState object representing your creature's current state.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.TurnsSkipped">
            <summary>
             <para>
              A creature can get skipped for a number of turns if it takes too long to execute.
              There is a limit to the time an animal can use for processing every turn which is
              calculated dynamically by the Terrarium each time it starts based on your computer's
              processing power.
             </para>
             <para>
              To see how long your creature takes to process, you can open the
              Trace window, unselect "Show Organism Traces", and then select your creature.  Note
              that this time will be different depending on the machine.
             </para>
             <para>
              If you do break the limit Terrarium determines how many ticks worth of time you've gone
              over the limit and sets this property.  You can examine this property to recover from
              conditions where your creature is skipped for a given number of turns.  This is useful
              since you may not receive events that fire while during the time your creature's turn
              is being skipped.
             </para>
            </summary>
            <returns>
             A System.Int32 value for the number of turns the creature was skipped before it was
             assigned another time slice.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.CanReproduce">
            <summary>
             <para>
              Determines whether all conditions are met for your organism to be able to reproduce.
              These conditions include various state information like whether your creature is
              mature, has enough energy, and is not already reproducing.
             </para>
            </summary>
            <returns>
             True if you creature can reproduce, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.CurrentReproduceAction">
            <summary>
             <para>
              After your creature has begun reproduction you can get the ReproduceAction object that
              represents your creature's current reproduction.  You can use this to examine
              the dna byte array that will be passed to the child.
             </para>
            </summary>
            <returns>
             A ReproduceAction object representing the current reproduction and the values
             passed into BeginReproduction.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.IsReproducing">
            <summary>
             <para>
              Determines if your organism is currently in the process of reproducing.  Because
              reproducing is an asynchronous action, the organism may not actually be giving
              birth yet.
             </para>
            </summary>
            <returns>
             True if the creature is in the state of reproduction, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.Organism.ID">
            <summary>
             <para>
              The unique GUID for an organism.  This is used to store plant/animal state
              when being saved to disk, or when passing plant/animal information to children
              during reproduction.
             </para>
            </summary>
            <returns>
             A string value representing the unique GUID or ID for the organism.
            </returns>
        </member>
        <member name="M:OrganismBase.Animal.SerializeAnimal(System.IO.MemoryStream)">
            <summary>
             <para>
              This method should be overridden by any class inheriting from 
              Animal.  This method is called with a MemoryStream that the
              user can place any data on they wish to Serialize during
              save games or while being teleported.
             </para>
             <para>
              The complement of this method is the DeserializeAnimal method
              which is called to deserialize the data when the creature
              is restored.  Authors should be careful when writing to a
              MemoryStream since it will be truncated at 8000bytes.
             </para>
            </summary>
            <param name="m">
             MemoryStream used by the creature to serialize data.
            </param>
        </member>
        <member name="M:OrganismBase.Animal.DeserializeAnimal(System.IO.MemoryStream)">
            <summary>
             <para>
              This method should be overridden by any class inheriting from 
              Animal.  This method is called with a MemoryStream that the
              user can read any data from that was written during the
              call to SerializeAnimal.
             </para>
             <para>
              Care should be taken when reading from a MemoryStream since
              the values may have been truncated at 8000bytes if more than
              8000bytes were originally written.
             </para>
            </summary>
            <param name="m">
             MemoryStream used by the creature to deserialize data.
            </param>
        </member>
        <member name="M:OrganismBase.Animal.InternalAnimalSerialize(System.IO.MemoryStream)">
            <summary>
             Implemented by the Animal class in order to allow
             serialization of any private members required for the
             class to operate properly after deserialization.
            </summary>
            <param name="m">A memory stream that can be written to.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.Animal.InternalAnimalDeserialize(System.IO.MemoryStream)">
            <summary>
             Implemented by the Animal class in order to allow
             deserialization of any private members required for the
             class to operate properly after deserialization.
            </summary>
            <param name="m">A memory stream that can be written to.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.Animal.Scan">
            <summary>
             <para>
              Scans the world around your creature's current location in a circular
              area and returns an ArrayList of OrganismState objects representing
              what was seen.
             </para>
             <para>
              The radius scanned by your creature is dependent upon the number of points
              placed into the EyesightPoints attribute.  Animals may also hide within your
              radius by using camouflage.  This means that more points placed into the
              EyesightPoints attribute will yield a better vision of hidden creatures.
             </para>
             <para>
              Because of camouflage and the random aspect of hiding vs. being seen by another
              creature, multiple calls to Scan might returns different results.  However,
              each call to Scan also takes additional time from your creature's total timeslice.
             </para>
             <para>
              It is recommended that you hold onto the OrganismState objects, determine your
              target creature, and then use the LookFor method to update the state rather than
              calling the Scan method again.  The LookFor method also takes into account camouflage
              and may not work the first time, but is much less expensive timewise than Scan.
             </para>
            </summary>
            <returns>
             System.Collections.ArrayList of OrganismState objects your creature can see.
            </returns>
        </member>
        <member name="M:OrganismBase.Animal.RefreshState(System.String)">
            <summary>
             <para>
              Tries to return an updated OrganismState given a creature's ID.  This function
              may return null if the creature can't be found or was hidden by camouflage.
              You may call this method multiple times just like the LookFor method and get
              different results.
             </para>
            </summary>
            <param name="organismID">
             GUID which represents a specific organism in the system.
            </param>
            <returns>
             OrganismState representing the creature being looked for or null if not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the organismID parameter is null.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.LookFor(OrganismBase.OrganismState)">
            <summary>
             <para>
              Tries to return an updated OrganismState given a creature's state OrganismState.
              This function may return null if the creature can't be found or was hidden by
              camouflage.  You may call this method multiple times and get different results.
             </para>
            </summary>
            <param name="organismState">
             The stale OrganismState object you want to refresh.
            </param>
            <returns>
             OrganismState representing the creature being looked for or null if not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the organismState parameter is null.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.IsMySpecies(OrganismBase.OrganismState)">
            <summary>
             <para>
              Allows a creature to determine if the OrganismState of another creature
              represents the same species.  This can be used to determine whether you
              should attack/defend against another creature.
             </para>
             <para>
              Creatures of the same species often don't fight one another, defend against
              one another, and kill one another.  They often help their own species in
              fights against other species.  Carnivores of the same species may sacrifice
              themselves as food once they become too old to members of their species.
             </para>
            </summary>
            <param name="targetState">
             The OrganismState for the creature to be used in species comparison.
            </param>
            <returns>
             True if the organism owning the state object is of the same species, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetState parameter is null.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.StopMoving">
            <summary>
             <para>
              Clears any pending movement operations your creature might be performing.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.Animal.BeginMoving(OrganismBase.MovementVector)">
            <summary>
             <para>
              Method used to command a creature to begin moving towards a specific location
              at a specific speed.  The actual movement operation may take several turns,
              but is always initiated using this method.  Your movement location should
              be within the world boundary and your movement speed should be less than or
              equal to your creature's Species.MaximumSpeed.
             </para>
             <para>
              Once called the creature will begin moving towards the specified point.  This
              movement will continue until you issue a different BeginMoving command to your
              creature, it reaches its destination, or becomes blocked by something.  Any
              calls to BeginMoving will clear out any previous calls, so care should be taken
              when issuing multi-part path movements.
             </para>
             <para>
              Once the movement is completed the MoveCompleted event will be fired and your
              event handler for this function will be called if you've provided one.  The
              event handler will provide full information about the results of an attempted
              movement operation.
             </para>
            </summary>
            <param name="vector">
             The MovementVector that determines the point you are moving to and how fast to move there.
            </param>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the vector parameter is null.
            </exception>
            <exception cref="T:OrganismBase.OutOfBoundsException">
             Thrown if the destination is outside of the world boundaries.
            </exception>
            <exception cref="T:OrganismBase.TooFastException">
             Thrown if the speed defined in the vector is greater than Species.MaximumSpeed.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.BeginDefending(OrganismBase.AnimalState)">
            <summary>
             <para>
              Method used to command a creature to begin defending against a specific
              target creature.  You can only defend against one creature at a time,
              so only the final call to BeginDefending will actually be used 
              in the upcoming turn.
             </para>
             <para>
              Once your creature has finished defending, the DefendCompleted event will
              be fired and your event handler will be called if you provided one.  You
              can use this event to determine the results of your defense.
             </para>
            </summary>
            <param name="targetAnimal">
             The AnimalState that represents the animal you want to defend against.
            </param>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetAnimal parameter is null.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.BeginAttacking(OrganismBase.AnimalState)">
            <summary>
             <para>
              Method used to command your creature to start attacking another
              creature.  You can only attack one creature per round, and a single
              call to BeginAttacking will only attack a target creature in the
              upcoming tick.  Calling BeginAttacking multiple times in the same
              turn will only result in your creature attacking the target specified
              in the last call to BeginAttacking.
             </para>
             <para>
              Attacking is asynchronous so you'll need to handle the AttackCompleted
              event in order to get the status of your attack.  A single attack might
              not kill a target enemy so you should detect if the enemy is still
              alive and call BeginAttacking once per round until the target creature
              is either dead or has escaped.
             </para>
            </summary>
            <param name="targetAnimal">
             The AnimalState object that represents the creature you want your creature to attack.
            </param>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetAnimal parameter is null.
            </exception>
            <exception cref="T:OrganismBase.NotHungryException">
             Thrown if the creature is not hungry enough to attack.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.WithinEatingRange(OrganismBase.OrganismState)">
            <summary>
             <para>
              Used to determine if your creature is within range to eat another
              target creature.
             </para>
             <para>
              This method does not attempt to validate the position of the
              organismState with respect to the current world state.  If you
              pass a stale object in then you may get stale results.  Make sure
              you use the LookFor method to get the most up-to-date results.
             </para>
            </summary>
            <param name="targetOrganism">
             OrganismState of the creature you're thinking of eating.
            </param>
            <returns>
             True if the creature is within range to eat, False otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetOrganism parameter is null.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.WithinAttackingRange(OrganismBase.AnimalState)">
            <summary>
             <para>
              Used to determine if your creature is within range to attack another
              target creature.
             </para>
             <para>
              This method does not attempt to validate the position of the
              organismState with respect to the current world state.  If you
              pass a stale object in then you may get stale results.  Make sure
              you use the LookFor method to get the most up-to-date results.
             </para>
            </summary>
            <param name="targetOrganism">
             OrganismState of the creature you're thinking of attacking.
            </param>
            <returns>
             True if the creature is within range to attack, False otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetOrganims parameter is null
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.BeginEating(OrganismBase.OrganismState)">
            <summary>
             <para>
              Method used to command your creature to start eating another creature.
              You can only eat one target creature per round, and a single call to
              BeginEating will only attack a target creature in the upcoming tick.
              Calling BeginEating multiple times in the same turn will only result
              in your creature eating the target specified in the last call to
              BeginEating.
             </para>
             <para>
              Eating is asynchronous so you'll need to handle the EatCompleted event
              in order to get the status of the bite.  A single bite might not
              produce enough energy for your creature so you'll have to make multiple
              bites against the same target until it is completed eaten.
             </para>
            </summary>
            <param name="targetOrganism">
             OrganismState of the creature you wish to eat.
            </param>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetOrganism parameter is null.
            </exception>
            <exception cref="T:OrganismBase.AlreadyFullException">
             Thrown if your creature is not hungry enough to eat.
            </exception>
            <exception cref="T:OrganismBase.NotVisibleException">
             Thrown if the creature had disappeared from your creature's view.
            </exception>
            <exception cref="T:OrganismBase.NotWithinDistanceException">
             Thrown if your creature is not within eating distance.
            </exception>
            <exception cref="T:OrganismBase.ImproperFoodException">
             Thrown if a Carnivore tries to eat a plant or a Herbivore tries to eat an Animal
            </exception>
            <exception cref="T:OrganismBase.NotDeadException">
             Thrown if a Carnivore tries to eat a creature that isn't dead yet.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.CanAttack(OrganismBase.AnimalState)">
            <summary>
             <para>
              Used to determine if your creature can attack another creature.
              This will return true all the time for a Carnivore since they
              can always attack.  
             </para>
             <para>
              For Herbivores this will return true if they are hungry enough
              to be aggressive.  Herbivores may also attack a creature in
              the upcoming round if that creature attacked them in the
              previous round.  The best place to attack a creature that is
              attacking you is to handle the Attacked event.
             </para>
            </summary>
            <param name="targetAnimal">
             AnimalState for the creature you would like to attack.
            </param>
            <returns>
             True if your creature can attack the target creature, False otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
             Thrown if the targetAnimal parameter is null.
            </exception>
        </member>
        <member name="M:OrganismBase.Animal.InternalMain(System.Boolean)">
            <summary>
             Provides all of the per tick processing for an Animal.  This method
             fires all of the events that make a creature tick.  Some events
             are fired every tick, while other events are only fired whenever
             certain actions complete.  This method can be called in order to
             process Animal code without processing the developer code in the
             instance they are being skipped for using too much time.
            </summary>
            <param name="clearOnly">Used by the system to clear completed actions, but not fire events.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.Animal.OnBorn(OrganismBase.BornEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire off born events.
            </summary>
            <param name="e">The born event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnAttacked(OrganismBase.AttackedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire Attacked events.
            </summary>
            <param name="e">The attacked event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnIdle(OrganismBase.IdleEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire idle events.
            </summary>
            <param name="e">The idle event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnLoad(OrganismBase.LoadEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire load events.
            </summary>
            <param name="e">The load event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnReproduceCompleted(OrganismBase.ReproduceCompletedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire reproduction events.
            </summary>
            <param name="e">The reproduction event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnDefendCompleted(OrganismBase.DefendCompletedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire defend events.
            </summary>
            <param name="e">The defend event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnTeleported(OrganismBase.TeleportedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire teleported events.
            </summary>
            <param name="e">The teleported event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnMoveCompleted(OrganismBase.MoveCompletedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire movement events.
            </summary>
            <param name="e">The movement event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnAttackCompleted(OrganismBase.AttackCompletedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire attack events.
            </summary>
            <param name="e">The attack event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="M:OrganismBase.Animal.OnEatCompleted(OrganismBase.EatCompletedEventArgs,System.Boolean)">
            <summary>
             Helper function used to fire eat events.
            </summary>
            <param name="e">The eat event arguments.</param>
            <param name="clearOnly">Only clear the action, don't fire the event.</param>
        </member>
        <member name="E:OrganismBase.Animal.MoveCompleted">
            <summary>
             <para>
              The MoveCompleted event is fired whenever your creature
              has completed a movement operation.  This can either mean
              the creature reached the destination or that the creature
              was blocked and can't move anymore.
             </para>
            </summary>
        </member>
        <member name="E:OrganismBase.Animal.AttackCompleted">
            <summary>
             <para>
              The AttackCompleted event is fired whenever your creature
              has completed an attack operation.  Your creature should
              hook this event to learn the results of the battle such
              as how much damage was inflicted and whether the target
              creature was killed.
             </para>
            </summary>
        </member>
        <member name="E:OrganismBase.Animal.EatCompleted">
            <summary>Fired when an EatAction is completed.</summary>
        </member>
        <member name="E:OrganismBase.Animal.Idle">
            <summary>Fired after all other events have been fired.</summary>
        </member>
        <member name="E:OrganismBase.Animal.Load">
            <summary>Fired before all other events have been fired.</summary>
        </member>
        <member name="E:OrganismBase.Animal.Teleported">
            <summary>Fired after an organism has been teleported.</summary>
        </member>
        <member name="E:OrganismBase.Animal.ReproduceCompleted">
            <summary>Fired on the parent when a ReproduceAction is completed.</summary>
        </member>
        <member name="E:OrganismBase.Animal.Born">
            <summary>Fired on an organism when it is first born.</summary>
        </member>
        <member name="E:OrganismBase.Animal.DefendCompleted">
            <summary>Fired when a DefendAction is completed.</summary>
        </member>
        <member name="E:OrganismBase.Animal.Attacked">
            <summary>Fired when an organism is being attacked by another organism.</summary>
        </member>
        <member name="P:OrganismBase.Animal.World">
            <summary>
             Provides access to the world boundary object.  This can
             be used to investigate the world from an Animal's point
             of view.
            </summary>
        </member>
        <member name="P:OrganismBase.Animal.Antennas">
            <summary>
             <para>
              Provides access to the creature's Antenna.  Each Antenna has a specific set of
              positions that it may be in.  Setting states with this information is possible
              as is passing numeric data.
             </para>
            </summary>
            <returns>
             AntennaState for the organism to initiate communication.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.WorldWidth">
            <summary>
             <para>
              The width of the world in single points/pixels.  Use this to make sure
              you don't try to move outside of the bounds of the Terrarium and to
              help manage your creature's population size/density.
             </para>
            </summary>
            <returns>
             System.Int32 representing the width of the Terrarium in points/pixels.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.WorldHeight">
            <summary>
             <para>
              The height of the world in single points/pixels.  Use this to make sure
              you don't try to move outside of the bounds of the Terrarium and to
              help manage your creature's population size/density.
             </para>
            </summary>
            <returns>
             System.Int32 representing the height of the Terrarium in points/pixels.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.State">
            <summary>
             The current state of your own creature.  This is used to get the latest
             information about your creature's health, damage, and other stats available
             on the AnimalState object.
            </summary>
            <returns>
             AnimalState representing the most current state of your creature.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.Species">
            <summary>
             Returns the immutable species object containing information about
             your creature's species related information.  This includes how
             many points were placed into creature attributes and other values
             calculated from those points allocations.
            </summary>
            <returns>
             IAnimalSpecies representing the immutable characteristics of your creature.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.CurrentMoveToAction">
            <summary>
             <para>
              After your creature has begun moving you can get the MoveToAction object that
              represents your creature's current movement action.  You can use this to examine
              the movement location and speed that your creature moving to see if you'll need
              to alter your course.
             </para>
            </summary>
            <returns>
             A MoveToAction object representing the current movement and the values
             passed into BeginMoving.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.IsMoving">
            <summary>
             <para>
              Used to determine if your creature has been commanded to move.
              You can also check the CurrentMoveToAction property to get
              the actual movement vector for your creature.  Because moving
              is asynchronous your creature might not have started moving
              yet.
             </para>
            </summary>
            <returns>
             True if your creature is or will be moving, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.CurrentDefendAction">
            <summary>
             <para>
              After your creature has begun defending you can get the DefendAction object that
              represents you're creatures current defend action.  You can use this to examine
              the target creature you're defending against and determine if there might be a
              more appropriate enemy.
             </para>
            </summary>
            <returns>
             A DefendAction object representing the current defend action and the values
             passed into BeginDefending.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.IsDefending">
            <summary>
             <para>
              Used to determine if your creature has been commanded to defend.
              You can also check the CurrentDefendAction property to get
              the actual target creature you're defending against.  Because defending
              is asynchronous your creature won't defend until the upcoming tick.
             </para>
            </summary>
            <returns>
             True if your creature will defend the next tick, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.CurrentAttackAction">
            <summary>
             <para>
              After your creature has begun attacking you can get the AttackAction object that
              represents your creature's current attack action.  You can use this to examine
              the target creature you're attacking and determine if there might be a
              more appropriate enemy.
             </para>
            </summary>
            <returns>
             AttackAction object representing the current attack action and the values
             passed into BeginAttacking.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.IsAttacking">
            <summary>
             <para>
              Used to determine if your creature has been commanded to attack.
              You can also check the CurrentAttackAction property to get
              the actual target creature you're attacking.  Because attacking
              is asynchronous your creature won't attack until the upcoming tick.
             </para>
            </summary>
            <returns>
             True if your creature will attack the next tick, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.CurrentEatAction">
            <summary>
             <para>
              After your creature has begun eating you can get the EatAction object that
              represents you're creatures current eat action.  You can use this to examine
              the target creature your eating and determine if their might be a better
              target to eat.
             </para>
            </summary>
            <returns>
             EatAction object representing the current eat action and the values
             passed into BeginEating.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.IsEating">
            <summary>
             <para>
              Used to determine if your creature has been commanded to eat.
              You can also check the CurrentEatAction property to get
              the actual target creature you're eating.  Because eating
              is asynchronous your creature won't actually eat until the upcoming tick.
             </para>
            </summary>
            <returns>
             True if your creature will eat the next tick, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.Animal.CanEat">
            <summary>
             <para>
              Used to determine if your creature is capable of eating depending
              on the creature's current energy state.  You can also trap the
              AlreadyFullException from BeginEating.
             </para>
            </summary>
            <returns>
             True if your creature is hungry enough to eat, False otherwise.
            </returns>
        </member>
        <member name="T:OrganismBase.AntennaState">
            <summary>
             <para>
              Provides access to a creature's Antenna.  Each creature has two
              Antenna that can be placed in 10 different positions each.  This
              enables a multitude of states that can be used to communicate
              with other creatures of the same species or even creatures of
              different species.
             </para>
             <para>
              By default both Antenna are positioned to the AntennaPosition.Left.
              In addition to setting the state of each individual Antenna.  The
              author can also use the AntennaValue property to set a number from
              0 to 99.  This is provided for ease of use since most author developers
              will use this structure for passing data (cell data maybe?) rather than
              simple flags or states.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.AntennaState.#ctor(OrganismBase.AntennaPosition,OrganismBase.AntennaPosition)">
            <summary>
             <para>
              Constructs a new AntennaState given the initial values for
              the LeftAntenna and RightAntenna.  If the values are not
              within the ranged allowed by the AntennaState they will
              be defaulted to AntennaPosition.Left;
             </para>
            </summary>
            <param name="left">
             AntennaPosition that will be assigned to LeftAntenna.
            </param>
            <param name="right">
             AntennaPosition that will be assigned to RightAntenna.
            </param>
        </member>
        <member name="M:OrganismBase.AntennaState.#ctor(OrganismBase.AntennaState)">
            <summary>
             <para>
              Constructs a new AntennaState given the initial values from
              a pre-existing AntennaState.  This effectively makes a copy
              without making the new state immutable.  This can be used to
              copy states from another creature and then modified slightly.
             </para>
            </summary>
            <param name="state">
             AntennaState used to initialize the LeftAntenna and RightAntenna properties.
            </param>
        </member>
        <member name="M:OrganismBase.AntennaState.MakeImmutable">
            <internal />
        </member>
        <member name="P:OrganismBase.AntennaState.LeftAntenna">
            <summary>
             <para>
              Used to get the position of the LeftAntenna.  You can also
              set the position of the LeftAntenna if the AntennaState is
              not set to immutable.  By default the AntennaState located on
              the Animal class is never marked immutable, and the AntennaState
              located on the AnimalState class is always immutable.
             </para>
             <para>
              You may also use the AntennaValue property if you are just trying
              to pass simple numbers or are organizing a state machine that has
              more than 10 specific states.
             </para>
            </summary>
            <returns>
             AntennaPosition representing the location of the LeftAntenna
            </returns>
        </member>
        <member name="P:OrganismBase.AntennaState.RightAntenna">
            <summary>
             <para>
              Used to get the position of the RightAntenna.  You can also
              set the position of the RightAntenna if the AntennaState is
              not set to immutable.  By default the AntennaState located on
              the Animal class is never marked immutable, and the AntennaState
              located on the AnimalState class is always immutable.
             </para>
             <para>
              You may also use the AntennaValue property if you are just trying
              to pass simple numbers or are organizing a state machine that has
              more than 10 specific states.
             </para>
            </summary>
            <returns>
             AntennaPosition representing the location of the LeftAntenna
            </returns>
        </member>
        <member name="P:OrganismBase.AntennaState.AntennaValue">
            <summary>
             <para>
              Used to get a numeric value between 0 and 99 that represents the
              AntennaPosition of both the LeftAntenna and RightAntenna.  You can
              also set the position of both Antenna by specifying a new value
              between 0 and 99 if the AntennaState is not set to immutable.  By
              default the AntennaState located on the Animal class is never
              marked immutable, and the AntennaState located on the AnimalState
              class is always immutable.
             </para>
             <para>
              You may also set each of the Antenna separately rather than using
              this special value that represents both Antenna numerically.
             </para>
            </summary>
            <returns>
             AntennaPosition representing the location of the LeftAntenna
            </returns>
        </member>
        <member name="T:OrganismBase.AttackedEventArgsCollection">
            <internal/>
        </member>
        <member name="M:OrganismBase.AttackedEventArgsCollection.Add(OrganismBase.AttackedEventArgs)">
            <summary>
             Adds a new AttackEventArgs to the collection for a creature.
             When the creature executes the next tick, each of these will
             create an Attacked event that can be used to determine which
             of the one or more creatures attack in the previous tick.
            </summary>
            <param name="attackedEventArgs">Represents the creature doing the attacking</param>
        </member>
        <member name="P:OrganismBase.AttackedEventArgsCollection.Item(System.Int32)">
            <summary>
             Default indexed property to get at collection items
             by index.
            </summary>
        </member>
        <member name="T:OrganismBase.AnimalSkinAttribute">
            <summary>
             Determines the skin used to display the organism on screen.
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinAttribute.skinFamily">
            <summary>
             The skin family defined by this attribute.  The default is the
             Ant skin.  Think of this like a font family.
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinAttribute.skin">
            <summary>
             The custom skin defined by this attribute.  The default is no
             default skin.
            </summary>
        </member>
        <member name="M:OrganismBase.AnimalSkinAttribute.#ctor(System.String)">
            <summary>
               <para>Use this constructor if you don't want to specify a Skin Family to use if
                  your custom skin doesn't exist.</para>
            </summary>
            <param name='skin'>The name of the assembly the contains the skin you want to use.</param>
        </member>
        <member name="M:OrganismBase.AnimalSkinAttribute.#ctor(OrganismBase.AnimalSkinFamily)">
            <summary>
               <para>Use this constructor if you don't have a custom skin you want to use with
                  your organism.</para>
            </summary>
            <param name='skinFamily'>An AnimalSkinFamily value that specifies the skin to use for this organism.</param>
        </member>
        <member name="M:OrganismBase.AnimalSkinAttribute.#ctor(OrganismBase.AnimalSkinFamily,System.String)">
            <summary>
               <para>Use this overload if you want to specify a custom skin, and specify the
                  family it belongs to so that something reasonable gets displayed if the skin
                  can't be loaded.</para>
            </summary>
            <param name='skinFamily'>An AnimalSkinFamily value that specifies the skin to use for this organism if the custom one can't be loaded.</param>
            <param name='skin'>The name of the assembly the contains the skin you want to use.</param>
        </member>
        <member name="P:OrganismBase.AnimalSkinAttribute.Skin">
            <summary>
             Provides read-only access to the string value specifying the skin.
            </summary>
        </member>
        <member name="P:OrganismBase.AnimalSkinAttribute.SkinFamily">
            <summary>
             Provides read-only access to the enumeration value representing the family of skins.
            </summary>
        </member>
        <member name="T:OrganismBase.AttackDamagePointsAttribute">
            <summary>
            Maximum damage your animal can inflict with one attack
            </summary>
            <remarks>
            <para>
            Points applied to this attribute mean your animal can inflict more damage when it attacks
            </para>
            </remarks>
        </member>
        <member name="T:OrganismBase.PointBasedCharacteristicAttribute">
            <internal/>
        </member>
        <member name="F:OrganismBase.PointBasedCharacteristicAttribute.appliedPoints">
            <summary>
             Number of points given to the attribute
            </summary>
        </member>
        <member name="F:OrganismBase.PointBasedCharacteristicAttribute.originalPoints">
            <summary>
             Number of points originally assigned to the attribute
            </summary>
        </member>
        <member name="F:OrganismBase.PointBasedCharacteristicAttribute.maximumValue">
            <summary>
             Maximum number of points able to be assigned to this attribute.
            </summary>
        </member>
        <member name="M:OrganismBase.PointBasedCharacteristicAttribute.#ctor(System.Int32,System.Int32)">
            <internal/>
        </member>
        <member name="M:OrganismBase.PointBasedCharacteristicAttribute.GetWarnings">
            <summary>
             This method formats an attribute warning to users when attributes have been used
             in an invalid manner or in a way that is not beneficial.  If points are not alotted
             in the proper increments the GetPointsNotUsedWarning method is called to indicate
             how many points have been wasted.
            </summary>
            <returns>A warning message of wasted points, or an empty string if none wasted</returns>
        </member>
        <member name="P:OrganismBase.PointBasedCharacteristicAttribute.Points">
            <internal/>
        </member>
        <member name="M:OrganismBase.AttackDamagePointsAttribute.#ctor(System.Int32)">
            <summary>
             Initializes the attribute with an attack value in the range of 0 to 100
            </summary>
            <param name="attackPoints">Specify the number of points (from 0 to 100) to apply to this attribute.</param>
        </member>
        <member name="P:OrganismBase.AttackDamagePointsAttribute.MaximumAttackDamagePerUnitRadius">
            <summary>
             Retrieves the amount of damage that can be inflicted per unit of a
             creature's radius.
            </summary>
        </member>
        <member name="T:OrganismBase.AuthorInformationAttribute">
            <summary>
             <para>
              This attribute is required to be present on all creatures so that
              a creature's author can be identified for prize competitions.  It accepts
              both an Author Name, and an Email.  The Author Name will be used on
              charting pages and top x graphs, while the Email will ONLY be made available
              to the Terrarium team to contact users for prizes.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AuthorInformationAttribute.authorName">
            <summary>
             The string representing the name of the author.
            </summary>
        </member>
        <member name="F:OrganismBase.AuthorInformationAttribute.authorEmail">
            <summary>
             The string representing the author's email.
            </summary>
        </member>
        <member name="M:OrganismBase.AuthorInformationAttribute.#ctor(System.String)">
            <summary>
             <para>
              This overload allows the user to set only the Author Name field.
              In this way an author doesn't have to give out their personal
              email address.
             </para>
            </summary>
            <param name="authorName">
             The creature author's name.  Should be a name that can be displayed on a top x population chart.
            </param>
        </member>
        <member name="M:OrganismBase.AuthorInformationAttribute.#ctor(System.String,System.String)">
            <summary>
             <para>
              This overload allows you to easily set both your name and email on
              your creature.  This is the recommended usage of the attribute whenever
              introducing a new creature into the EcoSystem.
             </para>
            </summary>
            <param name="authorName">
             The creature author's name.  Should be a name that can be displayed on a top x population chart.
            </param>
            <param name="authorEmail">
             The creature author's email.  Should be a valid email the Terrarium team can use for contact.
            </param>
        </member>
        <member name="P:OrganismBase.AuthorInformationAttribute.AuthorName">
            <summary>
             Read-only access to the name of the author as specified in the original
             attribute.
            </summary>
        </member>
        <member name="P:OrganismBase.AuthorInformationAttribute.AuthorEmail">
            <summary>
             Read-only access to the email of the author as specified in the original
             attribute.
            </summary>
        </member>
        <member name="T:OrganismBase.CamouflagePointsAttribute">
            <summary>
             <para>
              Determines how easily your animal can be seen by other animals
             </para>
             <para>
              The more points you apply, the less likely it is that another animal will see you when they look around.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.CamouflagePointsAttribute.#ctor(System.Int32)">
            <summary>
             Creates a new camouflage attribute given a number of points from 0 to 100 to
             put into the characteristic
            </summary>
            <param name="camouflagePoints">Specify the number of points (from 0 to 100) to apply to this attribute</param>
        </member>
        <member name="P:OrganismBase.CamouflagePointsAttribute.InvisibleOdds">
            <summary>
             Returns the calculated odds of a creature actually appearing invisible.
             This is a direct factor as to whether the creature will actually be
             seen or not and is not scaled by distance or the ability of sight of
             the other creatures.
            </summary>
        </member>
        <member name="T:OrganismBase.CarnivoreAttribute">
            <summary>Chooses whether your animal is an herbivore or a carnivore.</summary>
            <remarks>
            <para>
            <list type="bullet">
            <listheader>Pros for herbivores</listheader>
            <item><term>Easier to find food, but need to eat more of it because plants give less energy than meat</term></item>
            </list>
            </para>
            <para>
            <list type="bullet">
            <listheader>Pros for carnivores</listheader>
            <item><term>Harder to find food, but need to less of it because meat gives more energy than plants</term></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:OrganismBase.CarnivoreAttribute.isCarnivore">
            <summary>
             True if the creature is a carnivore, false otherwise.
            </summary>
        </member>
        <member name="M:OrganismBase.CarnivoreAttribute.#ctor(System.Boolean)">
            <summary>
             Creates a new carnivore attribute determining if the target creature
             should be a carnivore or not.
            </summary>
            <param name="isCarnivore">True if your organism is a carnivore, false if they are an herbivore.</param>
        </member>
        <member name="P:OrganismBase.CarnivoreAttribute.IsCarnivore">
            <summary>
             Read-only access to whether or not the attribute is used to specify
             a Carnivore type creature.
            </summary>
        </member>
        <member name="T:OrganismBase.DefendDamagePointsAttribute">
            <summary>
            Maximum damage your animal can defend against.
            </summary>
            <remarks>
            <para>
            Points applied to this attribute mean your animal can defend itself against stronger attacks.
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.DefendDamagePointsAttribute.#ctor(System.Int32)">
            <param name="defensePoints">
            Specify the number of points (from 1 to 100) to apply to this attribute.
            </param>
        </member>
        <member name="P:OrganismBase.DefendDamagePointsAttribute.MaximumDefendDamagePerUnitRadius">
            <internal/>
        </member>
        <member name="T:OrganismBase.EatingSpeedPointsAttribute">
            <summary>
            Determines how quickly your animal can eat.  The higher the value the faster food can be eaten.
            </summary>
            <remarks>
            <para>
            High values applied to this attribute mean your animal can eat before other animals get there to benefit from the kill
            if you're a carnivore or it means you can eat quickly and hide out if you're an herbivore.
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.EatingSpeedPointsAttribute.#ctor(System.Int32)">
            <param name="eatingSpeedPoints">
            Specify the number of points (from 1 to 100) to apply to this attribute.
            </param>
        </member>
        <member name="P:OrganismBase.EatingSpeedPointsAttribute.EatingSpeedPerUnitRadius">
            <internal/>
        </member>
        <member name="T:OrganismBase.EyesightPointsAttribute">
            <summary>
            Determines how far your animal can see.
            </summary>
            <remarks>
            <para>
            The more points you apply, the farther you can see.
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.EyesightPointsAttribute.#ctor(System.Int32)">
            <param name="eyesightPoints">
            Specify the number of points (from 1 to 100) to apply to this attribute.
            </param>
        </member>
        <member name="P:OrganismBase.EyesightPointsAttribute.EyesightRadius">
            <internal/>
        </member>
        <member name="T:OrganismBase.MarkingColorAttribute">
            <summary>
             Determines the color used for special markings on the organism (not currently used by Terrarium).
            </summary>
        </member>
        <member name="M:OrganismBase.MarkingColorAttribute.#ctor(System.Drawing.KnownColor)">
            <param name="markingColor">
            The special marking color for the animal.  This could be
            the color of the dot on a black widow or the stripes
            on some other animal.
            </param>
        </member>
        <member name="P:OrganismBase.MarkingColorAttribute.MarkingColor">
            <internal/>
        </member>
        <member name="T:OrganismBase.MatureSizeAttribute">
            <summary>
            Determines how large your organism will be.</summary>
            <remarks>
            <para>
            <list type="bullet">
            <listheader>Pros for larger organisms</listheader>
            <item><term>Attacks against smaller animals are more effective (damage inflicted is per unit of radius) which means there are more animals you can eat</term></item>
            <item><term>Defends against smaller animals are more effective (damage deterred is per unit of radius)</term></item>
            <item><term>Lifespan is longer</term></item>
            </list>
            </para>
            <para>
            <list type="bullet">
            <listheader>Cons for larger organisms</listheader>
            <item><term>Burn more energy per turn to stay alive, and to move (which means you need to eat more)</term></item>
            <item><term>Takes longer to reach maturity and thus to give birth</term></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.MatureSizeAttribute.#ctor(System.Int32)">
            <param name="matureSize">
            a size less than or equal to EngineSettings.MaxMatureSize
            and greater than or equal to EngineSettings.MinMatureSize
            </param>
        </member>
        <member name="P:OrganismBase.MatureSizeAttribute.MatureRadius">
            <internal/>
        </member>
        <member name="T:OrganismBase.MaximumEnergyPointsAttribute">
            <summary>Points applied to the MaximumEnergyPoints Attribute determine how much energy your animal can store -- 
            it determines how often your organism has to eat.</summary>
            <remarks>
            <para>
            If you apply lots of points to this attribute, your animal will be like a snake: it can fill up and not have to eat for
            a long time.  Less points here means you'll be more like a hummingbird: you'll need to eat small amounts constantly.
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.MaximumEnergyPointsAttribute.#ctor(System.Int32)">
            <param name="maximumEnergyPoints">
            Specify the number of points (from 1 to 100) to apply to this attribute.
            </param>
        </member>
        <member name="P:OrganismBase.MaximumEnergyPointsAttribute.MaximumEnergyPerUnitRadius">
            <internal/>
        </member>
        <member name="T:OrganismBase.MaximumSpeedPointsAttribute">
            <summary>
            Determines the top speed your animal can attain.
            </summary>
            <remarks>
            <para>
            The more points you apply to this attribute, the faster your animal will be able to move.
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.MaximumSpeedPointsAttribute.#ctor(System.Int32)">
            <param name="speedPoints">
            Specify the number of points (from 1 to 100) to apply to this attribute.
            </param>
        </member>
        <member name="P:OrganismBase.MaximumSpeedPointsAttribute.MaximumSpeed">
            <internal/>
        </member>
        <member name="T:OrganismBase.OrganismClassAttribute">
            <summary>
             <para>
              Use this attribute to identify the name of the class in your assembly that derives
              from either Plant or Animal, and that contains the code required for your creature
              to operate.  This is required for each organism assembly and a load time error
              will be thrown if you try to introduce an assembly without one.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismClassAttribute.className">
            <summary>
             The name of the class that should be loaded to represent the creature
             within the current assembly.  Only one creature per assembly may
             exist.
            </summary>
        </member>
        <member name="M:OrganismBase.OrganismClassAttribute.#ctor(System.String)">
            <summary>
             <para>
              Creates a new attribute that can be used to mark the creature class
              within an assembly.  Only one class per assembly may be marked, and only
              one instance of this attribute per assembly may exist.  The class will
              have to pass other forms of verification as well and the load may still
              fail.
             </para>
            </summary>
            <param name="className">
             The namespace qualified name of the class that implements your creature.
            </param>
        </member>
        <member name="P:OrganismBase.OrganismClassAttribute.ClassName">
            <summary>
             Provides read-only access to the name of the class that
             represents the creature class within the assembly.
            </summary>
        </member>
        <member name="T:OrganismBase.PlantSkinAttribute">
            <summary>
            Determines the skin used to display the organism on screen.</summary>
            <remarks>
            <para>
            </para>
            </remarks>
        </member>
        <member name="M:OrganismBase.PlantSkinAttribute.#ctor(System.String)">
            <summary>
               <para>Use this constructor if you don't want to specify a Skin Family to use if
                  your custom skin doesn't exist.</para>
            </summary>
            <param name='skin'>The name of the assembly the contains the skin you want to use</param>
        </member>
        <member name="M:OrganismBase.PlantSkinAttribute.#ctor(OrganismBase.PlantSkinFamily)">
            <summary>
               <para>Use this constructor if you don't have a custom skin you want to use with
                  your organism.</para>
            </summary>
            <param name='skinFamily'>A PlantSkinFamilyEnum value that specifies the skin to use for this organism.</param>
        </member>
        <member name="M:OrganismBase.PlantSkinAttribute.#ctor(OrganismBase.PlantSkinFamily,System.String)">
            <summary>
               <para>Use this overload if you want to specify a custom skin, and specify the
                  family it belongs to so that something reasonable gets displayed if the skin
                  can't be loaded.</para>
            </summary>
            <param name='skinFamily'>An AnimalSkinFamily value that specifies the skin to use for this organism if the custom one can't be loaded.</param>
            <param name='skin'>The name of the assembly the contains the skin you want to use.</param>
        </member>
        <member name="P:OrganismBase.PlantSkinAttribute.Skin">
            <internal/>
        </member>
        <member name="P:OrganismBase.PlantSkinAttribute.SkinFamily">
            <internal/>
        </member>
        <member name="T:OrganismBase.SeedSpreadDistanceAttribute">
            <summary>
             This attribute would control the distance that a plant could spread it
             seeds were it used.  Every time a plant was ready to reproduce a new
             plant would be generated within the radius specified by this attribute.
             (not currently used by Terrarium)
            </summary>
        </member>
        <member name="M:OrganismBase.SeedSpreadDistanceAttribute.#ctor(System.Int32)">
            <summary>
             Creates a new attribute that can be used on plants to specify
             how far new children can appear from the plant.  This attribute
             isn't implemented in the current Terrarium.
            </summary>
            <param name="seedSpreadDistance">The distance seeds can spread.</param>
        </member>
        <member name="P:OrganismBase.SeedSpreadDistanceAttribute.SeedSpreadDistance">
            <summary>
             Read-only access to the distacnce seeds can be spread.
            </summary>
        </member>
        <member name="T:OrganismBase.ActionResponseEventArgs">
            <summary>
             Base class used to define other events that are in response to an action
            </summary>
            <internal/>
        </member>
        <member name="T:OrganismBase.OrganismEventArgs">
            <internal />
        </member>
        <member name="F:OrganismBase.ActionResponseEventArgs.actionID">
            <summary>
             The ID of the action.  This is creature dependent and will
             be sequential each time a new action is generated.
            </summary>
        </member>
        <member name="F:OrganismBase.ActionResponseEventArgs.action">
            <summary>
             The actual action that was performed.
            </summary>
        </member>
        <member name="M:OrganismBase.ActionResponseEventArgs.#ctor(System.Int32,OrganismBase.Action)">
            <summary>
             Creates a new set of EventArgs that can be used in events
             to notify creatures of a completed action.
            </summary>
            <param name="actionID">The ID of the action that was completed.</param>
            <param name="action">The action that was completed.</param>
        </member>
        <member name="M:OrganismBase.ActionResponseEventArgs.ToString">
            <summary>
             Returns a string representation of these event arguments
             by calling the ToString method on the action field.
            </summary>
            <returns>The results of the ToString method on the action field</returns>
        </member>
        <member name="P:OrganismBase.ActionResponseEventArgs.ActionID">
            <summary>
             Retrives the ID of the action.
            </summary>
        </member>
        <member name="P:OrganismBase.ActionResponseEventArgs.Action">
            <summary>
             Retrieves the Acton that was completed.
            </summary>
        </member>
        <member name="T:OrganismBase.AttackCompletedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              AttackCompletedEventHandler delegate.  This class provides
              information about the results of the attack including
              damage inflicted, whether the creature was killed, or whether
              the creature escaped.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AttackCompletedEventArgs.inflictedDamage">
            <summary>
             The amount of inflicted damage.
            </summary>
        </member>
        <member name="F:OrganismBase.AttackCompletedEventArgs.escaped">
            <summary>
             Whether the creature escaped.
            </summary>
        </member>
        <member name="F:OrganismBase.AttackCompletedEventArgs.killed">
            <summary>
             Whether the creature was killed.
            </summary>
        </member>
        <member name="M:OrganismBase.AttackCompletedEventArgs.#ctor(System.Int32,OrganismBase.AttackAction,System.Boolean,System.Boolean,System.Int32)">
            <summary>
             Initializes a new set of event arguments that can be used
             in an event handler to notify the creature that an attack
             has been completed.
            </summary>
            <param name="actionID">The ID of the action.</param>
            <param name="action">The action being completed.</param>
            <param name="killed">Whether the target was killed.</param>
            <param name="escaped">Whether the target escaped.</param>
            <param name="inflictedDamage">How much damage was inflicted.</param>
            <internal />
        </member>
        <member name="M:OrganismBase.AttackCompletedEventArgs.ToString">
            <summary>
             <para>
              Provides a string representation of this class for debugging
              purposes.  Gives a count of damage inflicted, and whether
              or not the creature was killed or escaped.
             </para>
            </summary>
            <returns>
             System.String representing the contents of this class.
            </returns>
        </member>
        <member name="P:OrganismBase.AttackCompletedEventArgs.AttackAction">
            <summary>
             <para>
              Provides the AttackAction that was created from the values
              passed into the BeginAttack method.  This can be used to
              retrieve a state object for your target creature to continue
              your attack.
             </para>
            </summary>
            <returns>
             AttackAction representing the values passed into BeginAttack
            </returns>
        </member>
        <member name="P:OrganismBase.AttackCompletedEventArgs.InflictedDamage">
            <summary>
             <para>
              Returns the amount of damage done to the target creature as
              a result of the attack.  This number should be compared against
              the amount of damage the creature can withstand to help compute
              how difficult the creature will be to kill.
             </para>
            </summary>
            <returns>
             System.Int32 representing the amount of absolute damage inflicted.
            </returns>
        </member>
        <member name="P:OrganismBase.AttackCompletedEventArgs.Killed">
            <summary>
             <para>
              Provides information about the status of the target creature.
              If the creature was killed by your attack then Killed will
              bet set to True.
             </para>
            </summary>
            <returns>
             True if the target creature was killed, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.AttackCompletedEventArgs.Escaped">
            <summary>
             <para>
              Provides information about the status of the target creature.
              If the creature escaped your attack then Escaped will be
              set to True.  Creatures can escape by moving out of distance
              of an attack.
             </para>
            </summary>
            <returns>
             True if the target creature escaped, False otherwise.
            </returns>
        </member>
        <member name="T:OrganismBase.AttackedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              AttackedEventHandler delegate.  Contains the state
              of the creature attacking your creature.  This
              is useful in setting up a good defense
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AttackedEventArgs.attacker">
            <summary>
             The state of the attacker.
            </summary>
        </member>
        <member name="M:OrganismBase.AttackedEventArgs.#ctor(OrganismBase.AnimalState)">
            <summary>
             Creates a new set of event arguments that can be used to notify
             a creature that another creature has completed an attack action
             against them.
            </summary>
            <param name="attacker">The state of the attacking creature.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.AttackedEventArgs.ToString">
            <summary>
             <para>
              Provides a string representation of this class for debugging
              purposes.  Prints the Attacker's GUID so you can identify
              the creature being attacked using the property browser.
             </para>
            </summary>
            <returns>
             System.String representing the contents of this class.
            </returns>
        </member>
        <member name="P:OrganismBase.AttackedEventArgs.Attacker">
            <summary>
             <para>
              Provides the state of the creature attacking
              your creature.  You can use this state to attack
              the creature back, defend, or run away.
             </para>
            </summary>
            <returns>
             AnimalState representing the state of the creature attacking you.
            </returns>
        </member>
        <member name="T:OrganismBase.BornEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              BornEventHandler delegate.  Currently only a byte[]
              containing special initialization values for the
              new born creature is available.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.BornEventArgs.#ctor(System.Byte[])">
            <internal/>
        </member>
        <member name="M:OrganismBase.BornEventArgs.ToString">
            <summary>
             <para>
              Used to get string information about this event args for
              debugging purposes.
             </para>
            </summary>
            <returns>
             A System.String containing the value '#Born'
            </returns>
        </member>
        <member name="P:OrganismBase.BornEventArgs.Dna">
            <summary>
             <para>
              Provides a method for a child to retrieve Dna in the form of
              a byte[] from their parents.  This property may be null if
              the parent chose not to pass any Dna to the child.
             </para>
            </summary>
            <returns>
             a System.Byte[] of special data usable by a child creature.
            </returns>
        </member>
        <member name="T:OrganismBase.DefendCompletedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              DefendCompletedEventHandler delegate.  This class provides
              information about the creature that was blocked against so
              it can be used for future defensive strategies.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.DefendCompletedEventArgs.#ctor(System.Int32,OrganismBase.DefendAction)">
            <internal/>
        </member>
        <member name="M:OrganismBase.DefendCompletedEventArgs.ToString">
            <summary>
             <para>
              Provides a string representation of this class for debugging
              purposes.
             </para>
            </summary>
            <returns>
             System.String representing the contents of this class.
            </returns>
        </member>
        <member name="P:OrganismBase.DefendCompletedEventArgs.DefendAction">
            <summary>
             <para>
              The DefendAction object that holds information passed to the
              BeginDefending method.  This can be used to retrieve the
              AnimalState of the creature you're defending against.
             </para>
            </summary>
            <returns>
             DefendAction class containing the target creature you defended against.
            </returns>
        </member>
        <member name="T:OrganismBase.EatCompletedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              EatCompletedEventHandler delegate.  This class provides
              information about whether a creature's eat action was
              successful.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.EatCompletedEventArgs.#ctor(System.Int32,OrganismBase.EatAction,System.Boolean)">
            <internal/>
        </member>
        <member name="M:OrganismBase.EatCompletedEventArgs.ToString">
            <summary>
             <para>
              Provides a string representation of this class for debugging
              purposes.
             </para>
            </summary>
            <returns>
             System.String representing the contents of this class.
            </returns>
        </member>
        <member name="P:OrganismBase.EatCompletedEventArgs.EatAction">
            <summary>
             <para>
              Provides information about the original EatAction and
              the parameters passed into the BeginEating method.
              This can be used to retrieve the state of the creature
              you tried to eat.
             </para>
            </summary>
            <returns>
             EatAction representing the original values passed to BeginEating.
            </returns>
        </member>
        <member name="P:OrganismBase.EatCompletedEventArgs.Successful">
            <summary>
             <para>
              Provides information about whether or not an eat action was
              successful.  Often times if multiple creatures are eating
              the state target, the target will run out of food value
              before all creatures get to eat.  In this case the eat
              won't be successful and the creature won't gain any
              energy.
             </para>
            </summary>
            <returns>
             True if your creature gained energy from eating, False otherwise.
            </returns>
        </member>
        <member name="T:OrganismBase.IdleEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              IdleEventHandler delegate.  Currently no information is
              passed to creatures using this object.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.LoadEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              LoadEventHandler delegate.  Currently no information is
              passed to creatures using this object.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.MoveCompletedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              MoveCompletedEventHandler delegate.  This class provides
              information about why the creature stopped, a MoveToAction
              describing the movement that took place or was to take place,
              and the state of the organism blocking the creatures path if
              the reason for stopping was being blocked.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.MoveCompletedEventArgs.#ctor(System.Int32,OrganismBase.MoveToAction,OrganismBase.ReasonForStop,OrganismBase.OrganismState)">
            <internal/>
        </member>
        <member name="M:OrganismBase.MoveCompletedEventArgs.ToString">
            <summary>
             <para>
              Provides a string representation of this class for debugging
              purposes.  Presents the reason for stopping in string form.
             </para>
            </summary>
            <returns>
             System.String representing the contents of this class.
            </returns>
        </member>
        <member name="P:OrganismBase.MoveCompletedEventArgs.MoveToAction">
            <summary>
             <para>
              Provides the original MoveToAction created as a result of the
              BeginMoving function.  This can be used to get the MovementVector
              which can be reused if the creature has not yet reached its
              destination.
             </para>
            </summary>
            <returns>
             MoveToAction describing the movement that was passed to BeginMoving.
            </returns>
        </member>
        <member name="P:OrganismBase.MoveCompletedEventArgs.Reason">
            <summary>
             <para>
              Provides the reason for a creature being stopped.  This can either
              be that the creature reached it's destination or was somehow blocked
              by another creature.
             </para>
            </summary>
            <returns>
             ReasonForStop enumeration presenting the reason for stopping a movement.
            </returns>
        </member>
        <member name="P:OrganismBase.MoveCompletedEventArgs.BlockingOrganism">
            <summary>
             <para>
              Provides the OrganismState of the blocking creature if one exists.  This
              can be useful when writing event based movement algorithms and to find
              camouflaged creatures.
             </para>
            </summary>
            <returns>
             OrganismState of the blocking organism if Reason is equal to ReasonForStop.Blocked.
            </returns>
        </member>
        <member name="T:OrganismBase.ReproduceCompletedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              ReproduceCompletedEventHandler delegate.  This class
              contains information about the results of reproduction.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.ReproduceCompletedEventArgs.#ctor(System.Int32,OrganismBase.ReproduceAction)">
            <internal/>
        </member>
        <member name="M:OrganismBase.ReproduceCompletedEventArgs.ToString">
            <summary>
             <para>
              Provides a string representation of this class for debugging
              purposes.
             </para>
            </summary>
            <returns>
             System.String representing the contents of this class.
            </returns>
        </member>
        <member name="P:OrganismBase.ReproduceCompletedEventArgs.ReproduceAction">
            <summary>
             <para>
              Provides information about the original ReproduceAction and
              the parameters passed into the BeginReproduction method.
              This can be used to retrieve the Dna byte array that was
              passed to your creature's child.
             </para>
            </summary>
            <returns>
             ReproduceAction representing the original values passed to BeginReproduction.
            </returns>
        </member>
        <member name="T:OrganismBase.TeleportedEventArgs">
            <summary>
             <para>
              Special object used to hold arguments passed to the
              TeleportedEventHandler delegate.  Currently no information
              is passed to a creature after teleportation.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.TeleportedEventArgs.#ctor(System.Boolean)">
            <internal/>
        </member>
        <member name="M:OrganismBase.TeleportedEventArgs.ToString">
            <summary>
             <para>
              Used to get string information about this event args for
              debugging purposes.
             </para>
            </summary>
            <returns>
             A System.String containing the value '#Teleported'
            </returns>
        </member>
        <member name="P:OrganismBase.TeleportedEventArgs.LocalTeleport">
            <summary>
             <para>
              Provides information on whether you were teleported
              to a new machine or back to the local machine the
              teleportation started from.  When you are teleported
              locally you shouldn't have to set up your creature, it
              should be in the same state as when the teleport began.
             </para>
             <para>
              Note that your creature will be in a new location on the map.
              Note also that your creature will have missed some time within the
              game (not counted towards total age), because of the time
              it takes to teleport.
             </para>
            </summary>
            <returns>
             AnimalState representing the state of the creature attacking you.
            </returns>
        </member>
        <member name="T:OrganismBase.AttackCompletedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's AttackCompleted event.  The sender will always be your
              creature, and AttackCompletedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event will be fired after every attack your creature initiates.
              The returned AttackCompletedEventArgs will contain information about
              damage dealt, whether the creature is dead, or whether it got away.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.AttackedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's Attacked event.  The sender will always be your
              creature, and AttackedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event may be fired more than once per turn and will be
              fired once for each creature that initiates an attack against
              your creature assuming your creature lives through the battle.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.BornEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's Born event.  The sender will always be your
              creature, and BornEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event may be fired once for your creature when it is
              first born, in which case the BornEventArgs might have some
              Dna from the parent, or none if the creatures were
              made by the Terrarium game engine during introduction.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.DefendCompletedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's DefendCompleted event.  The sender will always be your
              creature, and DefendCompletedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event will be fired after your creature has defended against another
              creature.  This can often be used to defend against the creature additional
              times in the case they might continue attacking.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.EatCompletedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's EatCompleted event.  The sender will always be your
              creature, and EatCompletedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event will be fired after your creature has taken
              a bite of food.  Eating can be successful only if the target
              creature had enough available food matter left for your creature
              to eat.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.IdleEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's Idle event.  The sender will always be your
              creature, and IdleEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.LoadEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's Load event.  The sender will always be your
              creature, and LoadEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.MoveCompletedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's MoveCompleted event.  The sender will always be your
              creature, and MoveCompletedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event will fire when a move has been completed.  This can mean
              your creature was blocked or made it to its destination.  It may
              be several ticks from the BeginMoving function call to initiate movement
              until your creature's move is actually complete.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.ReproduceCompletedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's ReproduceCompleted event.  The sender will always be your
              creature, and ReproduceCompletedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event will be fired for your creature immediately after it has given
              birth to a child creature of your species.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.TeleportedEventHandler">
            <summary>
             <para>
              Describes the event handler required in order to hook into
              a creature's Teleported event.  The sender will always be your
              creature, and TeleportedEventArgs will be filled with information
              to help your creature process it's turn.
             </para>
             <para>
              This event may be fired whenever your creature is teleported
              internally in the same Terrarium or externally to another peer.
              This can be used to determine if special world related values should
              be reset and reinitialized.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.TraceEventHandler">
            <summary>
               <para>For system use only.</para>
            </summary>
        </member>
        <member name="T:OrganismBase.MovementVector">
            <summary>
             <para>
              Used to define a vector along which creatures can move.  The vector
              encompasses both destination and speed.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.MovementVector.#ctor(System.Drawing.Point,System.Int32)">
            <summary>
             <para>
              Used to define a vector along which creatures can move.  The vector
              encompasses both destination and speed.
             </para>
            </summary>
            <param name="destination">
             System.Point representing the location in the world to move to.
            </param>
            <param name="speed">
             The speed at which to move.
            </param>
            <exception cref="T:System.ApplicationException">
             Thrown if speed is less than 2.  Also thrown if destination is empty and speed is not 0.
            </exception>
        </member>
        <member name="M:OrganismBase.MovementVector.ToString">
            <summary>
             <para>
              Used to get a special string representation of this MovementVector
              for debugging purposes.
             </para>
            </summary>
            <returns>
             System.String of the string representation of a MovementVector.
            </returns>
        </member>
        <member name="P:OrganismBase.MovementVector.Destination">
            <summary>
             <para>
              Used to determine the destination location for this MovementVector.
             </para>
            </summary>
            <returns>
             System.Point representing the destination for this MovementVector.
            </returns>
        </member>
        <member name="P:OrganismBase.MovementVector.Speed">
            <summary>
             <para>
              Used to determine the speed defined for this MovementVector
             </para>
            </summary>
            <returns>
             System.Int32 representing the speed of movement for this MovementVector.
            </returns>
        </member>
        <member name="P:OrganismBase.MovementVector.IsStopped">
            <summary>
             <para>
              Used to determine if this MovementVector will stop movement.  This is
              true whenever an empty point and a speed of 0 was used.
             </para>
            </summary>
            <returns>
             System.Int32 representing the speed of movement for this MovementVector.
            </returns>
        </member>
        <member name="T:OrganismBase.OrganismEventResults">
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismEventResults.MakeImmutable">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.IsImmutable">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.Born">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.ReproduceCompleted">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.Teleported">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.AttackedEvents">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.MoveCompleted">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.AttackCompleted">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.EatCompleted">
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismEventResults.DefendCompleted">
            <internal/>
        </member>
        <member name="T:OrganismBase.PendingActions">
            <internal/>
        </member>
        <member name="M:OrganismBase.PendingActions.MakeImmutable">
            <internal/>
        </member>
        <member name="M:OrganismBase.PendingActions.SetDefendAction(OrganismBase.DefendAction)">
            <internal/>
        </member>
        <member name="M:OrganismBase.PendingActions.SetMoveToAction(OrganismBase.MoveToAction)">
            <internal/>
        </member>
        <member name="M:OrganismBase.PendingActions.SetAttackAction(OrganismBase.AttackAction)">
            <internal/>
        </member>
        <member name="M:OrganismBase.PendingActions.SetEatAction(OrganismBase.EatAction)">
            <internal/>
        </member>
        <member name="M:OrganismBase.PendingActions.SetReproduceAction(OrganismBase.ReproduceAction)">
            <internal/>
        </member>
        <member name="P:OrganismBase.PendingActions.IsImmutable">
            <internal/>
        </member>
        <member name="P:OrganismBase.PendingActions.DefendAction">
            <internal/>
        </member>
        <member name="P:OrganismBase.PendingActions.MoveToAction">
            <internal/>
        </member>
        <member name="P:OrganismBase.PendingActions.AttackAction">
            <internal/>
        </member>
        <member name="P:OrganismBase.PendingActions.EatAction">
            <internal/>
        </member>
        <member name="P:OrganismBase.PendingActions.ReproduceAction">
            <internal/>
        </member>
        <member name="T:OrganismBase.EngineSettings">
            <summary>
             <para>
              EngineSettings contains all of the various constants
              that affect the game world, creature attributes, and
              computed values for the Terrarium.  Creatures may
              use these values in order to decisions or calculate
              new values of their own.  These should be thought of
              as the laws of physics and biology for the Terrarium.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxAvailableCharacteristicPoints">
            <summary>
             <para>
              Represents the maximum number of characteristic points
              available for creature developers to assign to characteristic
              stats.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.InvisibleOddsMaximum">
            <summary>
             <para>
              Represents the highest attainable odds of appearing
              invisible in the Terrarium.  In order to achieve
              this maximum camouflage MaxAvailableCharacteristicPoints
              must be applied to the CamouflagePointsAttribute.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.InvisibleOddsBase">
            <summary>
             <para>
              Represents the lowest attainable odds of appearing
              invisible in the Terrarium.  In order to achieve this
              minimum available camouflage you must apply 0 points
              to the CamouflagePointsAttribute.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxEnergyMaximumPerUnitRadius">
            <summary>
             <para>
              Represents the highest attainable energy storage
              per unit radius.  In order to achieve this maximum
              available energy you must apply MaxAvailableCharacteristicPoints
              to the MaximumEnergyPointsAttribute.
             </para>
             <para>
              Please note that this value multiplied by your current radius
              is your actual total energy storage.  This means that putting
              points into the MaximumEnergyPointsAttribute or increasing the
              MatureSize of your creature will both increase the total
              energy storage.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxEnergyBasePerUnitRadius">
            <summary>
             <para>
              Represents the amount of energy storage per unit radius
              granted to a creature when 0 points have been placed into
              the MaximumEnergyPointsAttribute.
             </para>
             <para>
              Even if 0 points are placed into the MaximumEnergyPointsAttribute
              a creature can still achieve higher energy storage by increasing
              MatureSize.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.SpeedMaximum">
            <summary>
             <para>
              Represents the maximum achievable speed granted to a creature
              that places MaxAvailableCharacteristicPoints into the MaximumSpeedAttribute.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.SpeedBase">
            <summary>
             <para>
              Represents the base achievable speed granted to a creature
              that places 0 points into the MaximumSpeedAttribute.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaximumEatingSpeedPerUnitOfRadius">
            <summary>
             <para>
              Represents the maximum number of food chunks per bite that can be taken by a
              creature that places MaxAvailableCharacteristicPoints into the EatingSpeedPointsAttribute.
              The number of food chunks taken from this constant is multiplied by the current
              radius of the creature.  This means both MatureSize and the EatingSpeedPointsAttribute
              can increase the number of food chunks taken per bite.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.BaseEatingSpeedPerUnitOfRadius">
            <summary>
             <para>
              Represents the base food chunks per bite granted to
              a creature that puts 0 points into the EatingSpeedPointsAttribute.
              The number of food chunks taken from this constant is multiplied by the current
              radius of the creature.  This means both MatureSize and the EatingSpeedPointsAttribute
              can increase the number of food chunks taken per bite.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaximumInflictedDamagePerUnitOfRadius">
            <summary>
             <para>
              Represents the maximum amount of damage that can be dealt by
              a creature that places MaxAvailableCharacteristicPoints into the
              AttackDamagePointsAttribute.
              The amount of damage taken from this constant is multiplied by the current
              radius of the creature.  This means both MatureSize and the AttackDamagePointsAttribute
              can increase the amount of damage your creature can dish out.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.BaseInflictedDamagePerUnitOfRadius">
            <summary>
             <para>
              Represents the base amount of damage that can be dealt by
              a creature that places 0 points into the AttackDamagePointsAttribute.
              The amount of damage taken from this constant is multiplied by the current
              radius of the creature.  This means both MatureSize and the AttackDamagePointsAttribute
              can increase the amount of damage your creature can dish out.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaximumDefendedDamagePerUnitOfRadius">
            <summary>
             <para>
              Represents the maximum amount of damage that can be absorbed by
              a creature that places MaxAvailableCharacteristicPoints into the
              DefendDamagePointsAttribute.
              The amount of damage absorption taken from this constant is multiplied by the current
              radius of the creature.  This means both MatureSize and the DefendDamagePointsAttribute
              can increase the amount of damage your creature can take.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.BaseDefendedDamagePerUnitOfRadius">
            <summary>
             <para>
              Represents the base amount of damage that can be absorbed by
              a creature that places 0 points into the DefendDamagePointsAttribute.
              The amount of damage absorption taken from this constant is multiplied by the current
              radius of the creature.  This means both MatureSize and the DefendDamagePointsAttribute
              can increase the amount of damage your creature can take.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaximumEyesightRadius">
            <summary>
             <para>
              Represents the maximum distance a creature can see if they place
              MaxAvailableCharacteristicPoints into the EyesightPointsAttribute.
             </para>
             <para>
              This distance is in Terrarium Cells, so you have to multiply
              by 8 to get the actual distance in Terrarium Units (pixels).
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.BaseEyesightRadius">
            <summary>
             <para>
              Represents the base distance a creature can see if they place
              0 points into the EyesightPointsAttribute.
             </para>
             <para>
              This distance is in Terrarium Cells, so you have to multiply
              by 8 to get the actual distance in Terrarium Units (pixels).
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxMatureSize">
            <summary>
             <para>
              Represents the largest possible value that can be placed
              into the MatureSize attribute.  No creature may grow to
              be larger than this constant.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MinMatureSize">
            <summary>
             <para>
              Represents the smallest possible value that can be placed
              into the MatureSize attribute.  No creature may grow to
              maturity and still be smaller than this constant.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxGridRadius">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxSeedSpreadDistance">
            <summary>
             <para>
              The maximum distance that a plant can spread its seeds when reproducing.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalReproductionWaitPerUnitRadius">
            <summary>
             <para>
              The amount of time in game ticks that a creature must wait before being
              able to reproduce.  This number is multiplied by the creature's Radius
              and so larger creatures take longer between reproductions than smaller
              creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantReproductionWaitPerUnitRadius">
            <summary>
             <para>
              The amount of time in game ticks that a plant must wait before being
              able to reproduce.  This number is multiplied by the plant's Radius
              and so larger plants take longer between reproductions than smaller
              plants.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalLifeSpanPerUnitMaximumRadius">
            <summary>
             <para>
              The amount of time in game ticks that a creature can stay alive.  This
              number is multiplied by the creature's MatureSize so smaller creatures
              will not live as long as larger creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.CarnivoreLifeSpanMultiplier">
            <summary>
             <para>
              This multiplier is used to modify the life span for Carnivores.
              Since Carnivores have double the lifespan of Herbivores they get
              twice as many opportunities for reproduction
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantLifeSpanPerUnitMaximumRadius">
            <summary>
             <para>
              The amount of time in game ticks that a plant can stay alive.  This
              number is multiplied by the plant's MatureSize so smaller plants
              will not live as long as larger plants.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.TimeToRot">
            <summary>
             <para>
              The amount of time in game ticks that a creature's corpse stays
              in the EcoSystem before it rots away and is removed.  Carnivores
              should make sure to quickly pounce on dead corpses as a food source
              before they rot.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.BaseAnimalEnergyPerUnitOfRadius">
            <summary>
             <para>
              The amount of energy burned by a creature each tick just for being
              alive in the game.  This constant is multiplied by the creature's
              radius so smaller creatures been less energy per tick than larger
              creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalRequiredEnergyPerUnitOfRadiusGrowth">
            <summary>
             <para>
              The amount of energy burned by a creature in order to grow a single unit
              of radius.  For smaller creatures this amount of energy will be quite
              taxing, but as the creature grows larger the amount of energy taken
              doesn't affect the creature as much.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.RequiredEnergyPerUnitOfRadiusSpeedDistance">
            <summary>
             <para>
              The amount of energy burned by a creature in order to move.  If you take
              the speed the creature is moving, the radius, and the distance they are
              moving along with this constant you can judge how much energy will be
              expended.
             </para>
             <para>
              Note that RadiusSpeedDistance is equal to Radius * Speed * Distance.
              This means that the faster a creature moves the more energy will be
              consumed for equal distances.  A creature should make sure only to
              move as fast as necessary to conserve energy.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalRequiredEnergyPerUnitOfHealing">
            <summary>
             <para>
              The amount of energy required to heal a creature by a single
              health unit.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.FoodChunksPerUnitOfRadius">
            <summary>
             <para>
              The amount of food chunks a creature amounts to once they
              become a corpse.  Larger creatures will have a larger amount
              of food chunks available to predators than smaller creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.EnergyPerAnimalFoodChunk">
            <summary>
             <para>
              The amount of energy given to a creature for
              one food chunk from a corpse.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.DamageToKillPerUnitOfRadius">
            <summary>
             <para>
              The amount of damage required to before a creature
              is killed.  This is multiplied by the Radius of the
              creature and so larger creatures can take many more
              hits than smaller creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalMaxHealingPerTickPerRadius">
            <summary>
             <para>
              The maximum number of healing points a creature can
              heal per tick.  This is multiplied by the Radius of the
              creature and so larger creatures can heal many more points
              than smaller creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.BasePlantEnergyPerUnitOfRadius">
            <summary>
             <para>
              The amount of energy burned by a plant each tick just for being
              alive in the game.  This constant is multiplied by the plant's
              radius so smaller plants been less energy per tick than larger
              plants.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantFoodChunksPerUnitOfRadius">
            <summary>
             <para>
              The amount of food chunks a plant amounts to. Larger plants will
              have a larger amount of food chunks available to herbivores than
              smaller plants.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.MaxEnergyFromLightPerTick">
            <summary>
             <para>
              The maximum amount of energy a plant can gain per tick from
              the natural light of the EcoSystem.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantRequiredEnergyPerUnitOfRadiusGrowth">
            <summary>
             <para>
              The amount of energy burned by a plant in order to grow a single unit
              of radius.  For smaller plants this amount of energy will be quite
              taxing, but as the plant grows larger the amount of energy taken
              doesn't affect the plant as much.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.EnergyPerPlantFoodChunk">
            <summary>
             <para>
              The amount of energy given to a creature for
              one food chunk from a plant.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantRequiredEnergyPerUnitOfHealing">
            <summary>
             <para>
              The amount of energy required to heal a plant by a single
              health unit.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantMaxHealingPerTickPerRadius">
            <summary>
             <para>
              The maximum number of healing points a plant can
              heal per tick.  This is multiplied by the Radius of the
              plant and so larger plants can heal many more points
              than smaller plants.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.ViewPortHeight">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.ViewPortWidth">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.MonitorModeHeight">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.MonitorModeWidth">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.GridWidthPowerOfTwo">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.GridHeightPowerOfTwo">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.GridCellWidth">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.GridCellHeight">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.OrganismSchedulingMaximumOvertime">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.OrganismSchedulingBlacklistOvertime">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.NumberOfAnimalsPerTeleporter">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.CarnivoreAttackDefendMultiplier">
            <summary>
             <para>
              Attack and Defense modifier applied to Carnivores.  This
              gives Carnivores an advantage in both attacking and defending
              against Herbivores since they have to attack and expend extra
              energy to obtain food.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.TicksToIncubate">
            <summary>
             <para>
              The amount of time in game ticks that is required between a call
              to BeginReproduction and a new creature actually being born
              from the parent.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalIncubationEnergyPerUnitOfRadius">
            <summary>
             <para>
              The amount of energy required per tick in order to incubate
              an offspring.  This is multiplied by the creature's Radius
              so larger creatures require more energy to incubate than
              smaller creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantIncubationEnergyPerUnitOfRadius">
            <summary>
             <para>
              The amount of energy required per tick in order to incubate
              an offspring.  This is multiplied by the plant's Radius
              so larger plants require more energy to incubate than
              smaller plants.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalMatureSizeProvidedEnergyPerUnitRadius">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantMatureSizeProvidedEnergyPerUnitRadius">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.AnimalIncubationEnergyMultiplier">
            <internal/>
        </member>
        <member name="F:OrganismBase.EngineSettings.PlantIncubationEnergyMultiplier">
            <internal/>
        </member>
        <member name="M:OrganismBase.EngineSettings.EngineSettingsAsserts">
            <internal/>
        </member>
        <member name="T:OrganismBase.AlreadyFullException">
            <summary>
            The animal is already full, so this action doesn't make sense.
            </summary>
        </member>
        <member name="T:OrganismBase.OrganismException">
            <summary>
            Base class for all exceptions that the game throws to organisms.
            </summary>
        </member>
        <member name="T:OrganismBase.GameEngineException">
            <summary>
               The base class for all exceptions an organism will
               receive from the game.
            </summary>
        </member>
        <member name="M:OrganismBase.GameEngineException.#ctor(System.String)">
            <summary>
               <para>Constructs a new Exception</para>
            </summary>
        </member>
        <member name="T:OrganismBase.AlreadyReproducingException">
            <summary>
            You can only reproduce when current reproduction is finished.
            </summary>
        </member>
        <member name="T:OrganismBase.ImproperFoodException">
            <summary>
            Organism tried to eat an improper food: Carnivores must eat meat, and herbivores must eat plants.
            </summary>
        </member>
        <member name="T:OrganismBase.IsDeadException">
            <summary>
            Not used anymore, but left for compatibility.
            </summary>
        </member>
        <member name="T:OrganismBase.NotDeadException">
            <summary>
            An animal must be dead to eat it.
            </summary>
        </member>
        <member name="T:OrganismBase.NotEnoughEnergyException">
            <summary>
            Not enough energy to perform this action.
            </summary>
        </member>
        <member name="T:OrganismBase.NotHungryException">
            <summary>
            Must be hungry (i.e. have a Normal or Deterioration energy level) to perform this action.
            </summary>
        </member>
        <member name="T:OrganismBase.NotMatureException">
            <summary>
            Only mature organisms can reproduce.
            </summary>
        </member>
        <member name="T:OrganismBase.NotReadyToReproduceException">
            <summary>
            Not enough time has elapsed since last reproduction.
            </summary>
        </member>
        <member name="T:OrganismBase.NotVisibleException">
            <summary>
            You tried to perform an action on another organism that was not visible to you.
            </summary>
        </member>
        <member name="T:OrganismBase.NotWithinDistanceException">
            <summary>
            The target organism is too far away to perform the requested action.
            </summary>
        </member>
        <member name="T:OrganismBase.OutOfBoundsException">
            <summary>
            You tried to move to a position that is outside the boundaries of the world.
            </summary>
        </member>
        <member name="T:OrganismBase.SizeOutOfRangeCharacteristicException">
            <summary>
               <para>Size must be within a certain bounds.</para>
            </summary>
        </member>
        <member name="M:OrganismBase.SizeOutOfRangeCharacteristicException.#ctor">
            <summary>
               <para>Size must be within a certain bounds.</para>
            </summary>
        </member>
        <member name="T:OrganismBase.TooFastException">
            <summary>
            This organism cannot move this fast.
            </summary>
        </member>
        <member name="T:OrganismBase.TooManyPointsException">
            <summary>
               <para>All points supplied for an organism must add up to 100</para>
            </summary>
        </member>
        <member name="M:OrganismBase.TooManyPointsException.#ctor">
            <summary>
               <para>All points supplied for an organism must add up to 100</para>
            </summary>
        </member>
        <member name="T:OrganismBase.TooManyPointsOnOneCharacteristicException">
            <summary>
               <para>Can only apply 100 points to any given characteristic.</para>
            </summary>
        </member>
        <member name="M:OrganismBase.TooManyPointsOnOneCharacteristicException.#ctor">
            <summary>
               <para>Can only apply 100 points to any given characteristic.</para>
            </summary>
        </member>
        <member name="T:OrganismBase.GenericTypeDescriptor">
            <summary>
             A Custom Type Descriptor class used to expand the Organism,
             OrganismState, and Species objects into the Property
             Browser dialog.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.GenericTypeDescriptor.propsCollection">
            <summary>
             Collection of property descriptors that define the visible
             properties when the object is viewed in the property
             grid.
            </summary>
        </member>
        <member name="F:OrganismBase.GenericTypeDescriptor.currentObject">
            <summary>
             The currently selected or visible object.
            </summary>
        </member>
        <member name="M:OrganismBase.GenericTypeDescriptor.#ctor(System.Object)">
            <summary>
             Creates a new type descriptor object given a currently
             selected object.  The properties will be pulled off
             via reflection.
            </summary>
            <param name="current">The object to retrieve properties from.</param>
        </member>
        <member name="M:OrganismBase.GenericTypeDescriptor.SetObject(System.Object)">
            <summary>
             Set a new object on the descriptor whose properties
             will be enumerated and displayed.
            </summary>
            <param name="current">The object to retrieve properties from.</param>
        </member>
        <member name="T:OrganismBase.Plant">
            <summary>
             <para>
              This is the base class used by any creatures that
              want to become a Plant.  This class contains
              all methods that define a plants actions and behaviors.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.Plant.SerializePlant(System.IO.MemoryStream)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Plant.DeserializePlant(System.IO.MemoryStream)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Plant.InternalPlantSerialize(System.IO.MemoryStream)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Plant.InternalPlantDeserialize(System.IO.MemoryStream)">
            <internal/>
        </member>
        <member name="M:OrganismBase.Plant.InternalMain(System.Boolean)">
            <internal/>
        </member>
        <member name="P:OrganismBase.Plant.State">
            <summary>
             <para>
              Gets the PlantState object that represents your creature's current
              state in the world.  This PlantState contains all of the standard
              OrganismState properties in addition to new properties defined
              just for use in plants.
             </para>
            </summary>
            <returns>
             PlantState object representing your plant's current world state.
            </returns>
        </member>
        <member name="T:OrganismBase.Vector">
            <summary>
             <para>
              A classic algebraic vector class.  This class contains methods
              that are integral to complex movement algorithms within the
              Terrarium.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.Vector.x">
            <summary>
             The value of the x component.
            </summary>
        </member>
        <member name="F:OrganismBase.Vector.y">
            <summary>
             The value of the y component.
            </summary>
        </member>
        <member name="M:OrganismBase.Vector.#ctor(System.Double,System.Double)">
            <summary>
             <para>
              Constructs a new Vector using an x and y coordinate pair.
             </para>
            </summary>
            <param name="x">
             System.Double for the x coordinate for this vector.
            </param>
            <param name="y">
             System.Double for the y coordinate for this vector.
            </param>
        </member>
        <member name="M:OrganismBase.Vector.#ctor(System.Drawing.Point)">
            <summary>
             <para>
              Constructs a new Vector using System.Drawing.Point
             </para>
            </summary>
            <param name="point">
             System.Drawing.Point for the x,y coordinate pair for this vector.
            </param>
        </member>
        <member name="M:OrganismBase.Vector.Scale(System.Double)">
            <summary>
             <para>
              Scales a vector by a constant value and returns a
              new vector.  
             </para>
            </summary>
            <param name="scalar">
             System.Double representing the scalar value.
            </param>
            <returns>
             Vector representing the new scaled vector
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.ToRadians(System.Double)">
            <summary>
             <para>
              Helper function used to convert degrees
              to radians.
             </para>
            </summary>
            <param name="degrees">
             System.Double representing the amount in degrees.
            </param>
            <returns>
             System.Double representing the amount in radians.
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.ToDegrees(System.Double)">
            <summary>
             <para>
              Helper function used to convert radians
              to degrees.
             </para>
            </summary>
            <param name="radians">
             System.Double representing the amount in radians.
            </param>
            <returns>
             System.Double representing the amount in degrees.
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.Rotate(System.Double)">
            <summary>
             <para>
              Rotates a vector about the origin by an angle given in Radians
              radians.
             </para>
             <para>
              A point (x,y) can be rotated around the origin (0,0) by running it through the following equations 
              to get the new point (x',y'):
              x' = cos(theta)*x - sin(theta)*y 
              y' = sin(theta)*x + cos(theta)*y
              where theta is the angle by which to rotate the point.
             </para>
            </summary>
            <param name="radians">
             System.Double for the rotation angle in radians.
            </param>
            <returns>
             Vector representing the newly rotated vector.
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.GetUnitVector">
            <summary>
             <para>
              Used to get the unit vector for the current vector.  The unit
              vector should have no component greater than 1.
             </para>
            </summary>
            <returns>
             Vector representing the unit vector of the current vector.
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.Subtract(System.Drawing.Point,System.Drawing.Point)">
            <summary>
             <para>
              Helper function that subtracts two points and computes
              the resulting vector.
             </para>
            </summary>
            <param name="point1">
             System.Drawing.Point representing the first point
            </param>
            <param name="point2">
             System.Drawing.Point representing the point to subtract from the first.
            </param>
            <returns>
             Vector representing the result of the subtraction.
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.Add(System.Drawing.Point,OrganismBase.Vector)">
            <summary>
             <para>
              Helper function that adds the components values of
              a point to an existing vector and returns the result
              as a new Point.
             </para>
            </summary>
            <param name="point">
             System.Drawing.Point containing x,y components to add to vector.
            </param>
            <param name="vector">
             Vector containing x,y components to be added to point
            </param>
            <returns>
             System.Drawing.Point of the combined x,y components of vector and point.
            </returns>
        </member>
        <member name="M:OrganismBase.Vector.ToString">
            <summary>
             <para>
              Converts the given vector into a textual representation
              useful for debugging purposes.
             </para>
            </summary>
            <returns>
             System.String describing the vector.
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.X">
            <summary>
             <para>
              Used to retrieve the X component of the vector.
             </para>
            </summary>
            <returns>
             System.Double for the X coordinate.
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.Y">
            <summary>
             <para>
              Used to retrieve the Y component of the vector.
             </para>
            </summary>
            <returns>
             System.Double for the Y coordinate.
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.Point">
            <summary>
             <para>
              Returns the x,y coordinate pair in the form of a System.Drawing.Point
             </para>
            </summary>
            <returns>
             System.Drawing.Point containing the x,y coordinates
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.Magnitude">
            <summary>
             <para>
              Used to compute the magnitude of the vector with respect
              to the origin.
             </para>
             <para>
              Returns a very fast approximate magnitude using a Taylor function
              accurate to within 10%.
             </para>
            </summary>
            <returns>
             System.Double representing the magnitude of the vector
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.TrueMagnitude">
            <summary>
             <para>
              Used to compute the real magnitude of the vector with respect
              to the origin.
             </para>
             <para>
              Returns a very accurate magnitude result.  However, this function
              tends to run much slower than an approximation.  For this reason
              the Terrarium uses the Magnitude property internally.
             </para>
            </summary>
            <returns>
             System.Double representing the magnitude of the vector
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.Direction">
            <summary>
             <para>
              Returns the direction of the vector in Radians with 0 facing
              East up to 2pi.
             </para>
            </summary>
            <returns>
             System.Double representing the direction of the vector.
            </returns>
        </member>
        <member name="P:OrganismBase.Vector.FastMagnitude">
            <returns>
            Returns a very fast approximate magnitude using a Taylor function
            accurate to within 10%.
            Uses the equation: distance = abs(x1 - x2) + abs(y1-y2) - min(abs(x1-x2), abs(y1-y2)) /2
            since we're doing magnitude, x2 and y2 are both zero
            </returns>
        </member>
        <member name="T:OrganismBase.AnimalState">
            <summary>
             <para>
              Represents a creature's state during a certain tick in time.  This
              class provides information on the creature's species, how much
              damage the creature has taken, and methods to compute energy
              requirements.
             </para>
             <para>
              For additional information you should look at the OrganismState
              class which provides information that is shared between the
              Plant/Animal states.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.OrganismState">
            <summary>
             <para>
              All properties of an organism that are used by the game are on this object.  Each
              OrganismState is immutable and references can be held as long as the organism
              needs them.
             </para>
             <para>
              This object only represents the state of a creature for a given turn and is not
              dynamically updated.  Creatures should use the LookFor method in order to
              get the latest state of another creature.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.radius">
            <summary>
             The radius of the organism.  The actual size is twice the
             radius.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.organismID">
            <summary>
             A GUID representing the unique ID of this organism.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.currentMoveToAction">
            <summary>
             Represent the current movement action.  Should
             be cleared during a teleport since the world
             may be different along with available destinations
             and paths.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.currentReproduceAction">
            <summary>
             Represents the current reproduction action.  Should
             be cleared during a teleport since the new
             situations after the teleportation might
             change whether the creature wants to reproduce
             or not.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.incubationTicks">
            <summary>
             The number of ticks the creature has been incubating
             a child.  This also gets reset during teleportation
             since it is dependent on the currentReproduceAction.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.currentPosition">
            <summary>
             The creature's current location in the world.  This
             item is still serialized since it is important when
             reloading a game state.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.isAlive">
            <summary>
             Determines if the creature is alive or not.
             Dead creatures should never be teleported, but
             the variable is still serialized for game states.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.energy">
            <summary>
             The amount of energy the creature currently has.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.species">
            <summary>
             A pointer to the species for this creature.  Each
             creature can identify various basic traits by
             it's species.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.currentFoodChunks">
            <summary>
             The amount of food chunks this creature represents.
             This is important for plants and dead animals.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.OrganismState.tickAge">
            <summary>
             The current age of the creature in game ticks.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.generation">
            <summary>
             A generational number used to figure out how
             long a species has been alive and how many
             times reproduction has occured.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.reproductionWait">
            <summary>
             The amount of time in game ticks a creature
             must wait before being capable of reproduction.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.growthWait">
            <summary>
             The amount of time in game ticks a creature
             must wait before being capable of growing.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.actualDirection">
            <summary>
             The direction the creature is moving in degrees.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.deathReason">
            <summary>
             The creature's death reason.  Generally this is the
             special value NotDead meaning the creature is still
             alive.  It will be changed to another reason upon the
             creature's death or teleportation.
            </summary>
        </member>
        <member name="F:OrganismBase.OrganismState.renderInfo">
            <summary>
             <para>
              This is a special object that is used to hold game
              engine information.  Primarily used by the rendering engine
              it contains information about selection, graphical sprite
              information, animation offsets, and anything else that
              needs to be specified by the gaming engine that shouldn't
              be directly part of the OrganismState itself.
             </para>
             <para>
              This object is not serialized because all animation information
              needs to be reset after switching machines.
             </para>
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.OrganismState.events">
            <summary>
             The results of any actions are stored here.  During a creature's
             tick these event results fire various events.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.OrganismState.immutable">
            <summary>
             Determines if the state object shold be able to be modified
             or whether the object should keep its current values regardless
             of what methods are called or properties are changed.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.OrganismState.lockedSizeAndPosition">
            <summary>
             A less restrictive immutability flag used just for locking
             location and size properties.
            </summary>
        </member>
        <member name="M:OrganismBase.OrganismState.#ctor(System.String,OrganismBase.ISpecies,System.Int32)">
            <summary>
             Create a new state object to represent an organism.
            </summary>
            <param name="id">The GUID ID representing this organism in the world.</param>
            <param name="species">The species which defines the basic properties of the organism.</param>
            <param name="generation">The familial generation number.</param>
        </member>
        <member name="M:OrganismBase.OrganismState.LockSizeAndPosition">
            <summary>
             Performs a special type of immutability lock for the size
             and position related properties only.  This is to ensure that
             the area of a creature isn't changed after the creature's index
             array position has been found in the game world.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.MakeImmutable">
            <summary>
             Makes all properties immutable.  Ensures that the organism state
             cannot be changed at all by creatures with access to the state.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.CloneMutable">
            <summary>
             Derived classes must override this to return an instance of their class type
             that has the same state (by calling CopyStateInto)
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.CopyStateInto(OrganismBase.OrganismState)">
            <summary>
             Derived classes must override (and call Base.CopyStateInto)
             if they have additional state
            </summary>
            <param name="newInstance">The new state that will hold this state's members</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.AddTickToAge">
            <summary>
             Adds a single tick to the creature's current age.  This is
             also responsible for ticking down other counters like growth
             and reproduction.  When ticks hits the LifeSpan the creature
             dies, but when the other counters reach 0 the action becomes
             available.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.ResetReproductionWait">
            <summary>
             Sets the current reproduction wait of the creature to
             the wait time specified by the creature's species.  This
             value will be set based on the creature's lifespan and
             creature type (whether carnivore or herbivore).  This is
             called by the engine after reproduction has completed.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.AddIncubationTick">
            <summary>
             Add a single tick to the current incubation period.  Called
             by the game engine each tick after the creature starts reproducing.
             Once the amount of ticks hits the limit for the amount of time
             required to incubate a child, the creature is born, and incubation
             is no longer required.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.BurnEnergy(System.Double)">
            <summary>
             Used by the game engine to burn a creature's energy depending
             on the various actions they perform including movement, reproduction,
             and growth.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.UpperBoundaryForEnergyState(OrganismBase.EnergyState)">
            <summary>
             <para>
              Returns the amount of energy required to be at the top of a given EnergyState.
              It's recommended that the actual EnergyState property be used to determine
              the current energy bucket a creature is in.
             </para>
            </summary>
            <param name="energyState">
             EnergyState enum value for the bucket to get the upper energy bounding for.
            </param>
            <returns>
             System.Double representing the amount of energy to be at the top of a given energy state.
            </returns>
        </member>
        <member name="M:OrganismBase.OrganismState.IncreaseRadiusTo(System.Int32)">
            <summary>
             Used by the game engine to increase the radius of a creature to a new radius
             amount.  Each time a creature grows this method is called to set the new radius.
             The new radius must be larger than the previous one, so creatures can't shrink.
             The radius can be increased by more than a single unit, but the current
             Terrarium only encompasses methods that increase a radius by a single unit.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.SetBitmapDirection">
            <summary>
             Determines the facing of the creature based on the movement
             vector and update the creature's actual direction as a result.
            </summary>
        </member>
        <member name="M:OrganismBase.OrganismState.Kill(OrganismBase.PopulationChangeReason)">
            <summary>
             Called by the game engine in order to kill the current creature.
             Since this method can only be called when the state is mutable
             player's can't use the method to arbitrarily kill competing
             organisms.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.Grow">
            <summary>
             This returns a clone because we need the radius to be editable
             and the object may not allow this because it is already in the index
             the object returned will have the same events as the original
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.ResetGrowthWait">
            <summary>
             Used by the game engine to reset the amount of time the creature
             must wait before growing.  The wait time is based on the creature's
             species class which uses the creature's lifepsan as a base for the
             growth period.  This should be called after a creature has been
             given the chance to grow, and must wait before growing again.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.HealDamage">
            <summary>
             Required override for other state classes.  This method gives
             the creature a chance to heal some previously inflicted damage.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.OrganismState.IsAdjacentOrOverlapping(OrganismBase.OrganismState)">
            <summary>
             <para>
              Determines if a creature is immediately next to or overlapping
              another creature using grid cells comparisons.
             </para>
            </summary>
            <param name="state2">
             OrganismState of the creature to check for proximity.
            </param>
            <returns>
             True if the creature is adjacent or overlapping, False otherwise.
            </returns>
        </member>
        <member name="M:OrganismBase.OrganismState.IsWithinRect(System.Int32,OrganismBase.OrganismState)">
            <summary>
             Used to compute whether or not a given state object is in an adjacent or
             overlapping grid cell.  The extra radius can be used to extend the area
             used for the function to find a match and so can be used for functions
             like visibiliy.
            </summary>
            <param name="state1ExtraRadius">The amount of extra grid cells to add</param>
            <param name="state2">The organism state of the creature to use in the area test.</param>
            <returns>True if the creature is within range, false otherwise.</returns>
        </member>
        <member name="M:OrganismBase.OrganismState.CompareTo(System.Object)">
            <summary>
             Compares two organism state objects together.  This method takes into
             account the Y position for graphical Z-Ordering purposes and can be used
             to sort creatures for back to front rendering.
            </summary>
            <param name="b">The object to be compared.  Has to be another OrganismState.</param>
            <returns>Less than 0 if the zOrder is less, 0 for equal, and greater than 0 for more.</returns>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.IsImmutable">
            <summary>
             Determines if the current creature state is immutable.
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.PreviousDisplayAction">
            <summary>
             Returns the action that the organism was performing
             between the last state and this one.  I.e. what ended on
             this state.
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.RenderInfo">
            <summary>
             This property remains mutable even though the rest of the object is immutable
             because it is used by the renderer and maintains rendering state across
             worldstate instances (like whether the organism is selected or not).
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.OrganismEvents">
            <summary>
             When events are completed the completion actions get listed into
             a collection of completed events.  These are then used by the
             processing functions to fire off events on the creature.
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.Species">
            <summary>
             <para>
              Describes the characteristics of a creature through the
              use of the ISpecies interface.
             </para>
            </summary>
            <returns>
             ISpecies interface representing the characteristics of the creature.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.IsMature">
            <summary>
             <para>
              Determines if the creature is mature by comparing the current Radius
              to the Radius it will have when mature.
             </para>
            </summary>
            <returns>
             True if the creature is mature, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.DeathReason">
            <summary>
             <para>
              Describes the reason why the creature died.  This is most often
              OldAge, Starvation, Killed, or Sickness.  If the creature is not
              dead yet then the value will be NotDead.
             </para>
            </summary>
            <returns>
             PopulationChangeReason describing the reason for death.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.TickAge">
            <summary>
             <para>
              Represents the age of a creature in game ticks.  Once
              a creature reaches a TickAge identical to its LifeSpan
              the creature will die from PopulationChangeReason.OldAge.
             </para>
            </summary>
            <returns>
             System.Int32 representing the age of the creature in game ticks.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.Generation">
            <summary>
             <para>
              Generation will be 0 the first time a creature is introduced.
              Each offspring of a creature will be labeled with its generation
              plus one.  This helps define the longevity of a creature.
             </para>
            </summary>
            <returns>
             System.Int32 representing the generation number for this creature.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.CurrentReproduceAction">
            <summary>
             Used to obtain or modify the current action representing
             the creature's reproduction status.  If this value is not
             null then the creature is reproducing.
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.ReadyToReproduce">
            <summary>
             <para>
              Determines if a creature is ready to reproduce based on the
              elapsed time since its previous reproduction.  Use ReproductionWait
              to determine exactly how long the creature has to go.
             </para>
            </summary>
            <returns>
             True if the creature is ready to reproduce.  False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.ReproductionWait">
            <summary>
             <para>
              Determines the number of ticks the creature must wait before
              reproducing again.  If your creature just needs to know if it's
              ready the ReadyToReproduce property can be used instead.
             </para>
            </summary>
            <returns>
             System.Int32 representing the time in ticks before the creature can reproduce.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.IsIncubating">
            <summary>
             <para>
              Determines if the creature is in the process of reproduction.
              Use IncubationTicks to find out exactly how long the creature
              has left to incubate.
             </para>
            </summary>
            <returns>
             True if the creature is in the process of reproducing, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.IncubationTicks">
            <summary>
             <para>
              Determines the number of ticks the creature must wait before it
              has finished reproducing.  If your creature just needs to know
              if it's currently reproducing use the IsIncubating property.
             </para>
            </summary>
            <returns>
             System.Int32 representing the number of ticks left for incubation.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.FoodChunks">
            <summary>
             <para>
              Determines the amount of food value this creature represents.
              This can be used to determine if attacking a creature will
              be worth the effort.
             </para>
            </summary>
            <returns>
             System.Int32 representing the number of food chunks this creature represents.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.StoredEnergy">
            <summary>
             <para>
              Determines how much energy a creature has stored.  This is used to
              compute the energy state of the creature.
             </para>
            </summary>
            <returns>
             System.Double representing the amount of energy this creature has stored.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.EnergyState">
            <summary>
             <para>
              Determine the current energy state of a creature by comparing
              the current amount of stored energy versus the various energy
              buckets.
             </para>
            </summary>
            <returns>
             EnergyState enum representing the creature's current energy state.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.PercentEnergy">
            <summary>
             <para>
              Determines the decimal percentage of the amount of energy
              a creature currently has, versus the total amount of energy
              the creature can store.
             </para>
            </summary>
            <returns>
             System.Double between 0 and 1, with 0 being none and 1 being maxed.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.PercentLifespanRemaining">
            <summary>
             <para>
              Determines the decimal percentage of the amount of life remaining
              a creature currently has, versus the total amount of LifeSpan.
             </para>
            </summary>
            <returns>
             System.Double between 0 and 1, with 1 being newly born, and 0 being dead.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.PercentInjured">
            <summary>
             Must be overriden in derived classes and compute a factor that
             can be used to represent the injury done to the creature.
            </summary>
            <internal />
        </member>
        <member name="P:OrganismBase.OrganismState.Position">
            <summary>
             <para>
              Returns the creature's current position as a Point.
             </para>
            </summary>
            <returns>
             System.Drawing.Point representing the creature's current location.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.GridX">
            <summary>
             <para>
              Retrieves the creature's current grid location.  This is useful for
              movement algorithms and is used by the engine for computing organism
              location in a fast and memory efficient manner.
             </para>
            </summary>
            <returns>
             System.Int32 representing the Terrarium grid cell for the center of the organism.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.GridY">
            <summary>
             <para>
              Retrieves the creature's current grid location.  This is useful for
              movement algorithms and is used by the engine for computing organism
              location in a fast and memory efficient manner.
             </para>
            </summary>
            <returns>
             System.Int32 representing the Terrarium grid cell for the center of the organism.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.CellRadius">
            <summary>
             <para>
              Determines the number of game cells a creature uses on the
              screen.  Each grid cell is 8 pixels in width and height.
             </para>
            </summary>
            <returns>
             System.Int32 for the grid cells the creature's radius represents.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.Radius">
            <summary>
             <para>
              Determines the actual radius of the creature.  This is used to
              determine how close to maturity a creature has gotten or in
              various computations on attack, defense, and movement.
             </para>
            </summary>
            <returns>
             System.Int32 of the actual radius of the creature.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.ID">
            <summary>
             <para>
              A string number in the form of a GUID that uniquely represents
              this creature in the EcoSystem.
             </para>
            </summary>
            <returns>
             System.String uniquely identifying this creature in the EcoSystem.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.CurrentMoveToAction">
            <summary>
             Retrieves information about the creature's current movement vector.
             If the creature is moving this value will always be non null, and
             null if the creature isn't currently moving.  This is used by the
             game engine since movement can encompass many turns.
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.OrganismState.Speed">
            <summary>
             <para>
              Determines the speed at which the creature is moving.  Useful
              in calculating overtake speeds for Carnivores and run-away
              speeds for Herbivores.
             </para>
            </summary>
            <returns>
             System.Int32 for the speed the creature is moving.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.ActualDirection">
            <summary>
             <para>
              Determines the direction the creature is moving in degrees.
              This along with Speed can be used to calculate where a creature
              will be in the future.
             </para>
            </summary>
            <returns>
             System.Int32 representing the direction the creature is moving in degrees.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.IsStopped">
            <summary>
             <para>
              Determines if the creature is moving or is completely stopped.
             </para>
            </summary>
            <returns>
             True if the creature is moving, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.IsAlive">
            <summary>
             <para>
              Determines if the creature is alive or dead.  This is used by
              Carnivores so they can find food in the form of corpses.
             </para>
            </summary>
            <returns>
             True if the creature is alive, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.OrganismState.GrowthWait">
            <summary>
             <para>
              Determines the amount of time in game ticks a creature must wait
              before they are able to grow.  If a creature is not yet mature,
              and the GrowthWait is 0, then it is possible the creature does
              not have enough energy or enough space in order to grow.  This
              should be remedied quickly.
             </para>
            </summary>
            <returns>
             System.Int32 for the amount of time in game ticks a creature has before they can grow.
            </returns>
        </member>
        <member name="M:OrganismBase.AnimalState.#ctor(System.String,OrganismBase.IAnimalSpecies,System.Int32)">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.CloneMutable">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.CopyStateInto(OrganismBase.OrganismState)">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.AddRotTick">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.CauseDamage(System.Int32)">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.HealDamage">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.IncreaseRadiusTo(System.Int32)">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.Grow">
            <internal/>
        </member>
        <member name="M:OrganismBase.AnimalState.EnergyRequiredToMove(System.Double,System.Int32)">
            <summary>
             <para>
              Provides a method for creatures to determine how much energy a specific
              movement action will cost.  The slower a creature moves the less energy
              they expend moving over a specific distance.  With this in mind the developer
              can determine the optimum speed at which to move to a given location versus
              time and energy consumption.
             </para>
            </summary>
            <param name='distance'>
             The amount of distance your creature is going to move.
            </param>
            <param name=' speed'>
             The speed your creature is going to move at.
            </param>
            <returns>
             System.Double representing the amount of energy required to make the movement action.
            </returns>
        </member>
        <member name="P:OrganismBase.AnimalState.Antennas">
            <summary>
             <para>
              Provides access to a read-only version of a creature's Antenna.  Each Antenna
              has a specific set of positions that it may be in.  Setting states with this
              information is possible as is passing numeric data.
             </para>
             <para>
              This property is used to examine the Antenna state of other creatures.  If you
              need to set the states of your own Antenna you should use the Antennas property
              on the Animal base class.
             </para>
            </summary>
            <returns>
             AntennaState for the organism to initiate communication.
            </returns>
        </member>
        <member name="P:OrganismBase.AnimalState.AnimalSpecies">
            <summary>
             <para>
              Provides information about the Species of the creature through the
              IAnimalSpecies interface.  This should be used to determine the
              stats of a creature for threat/food calculations.
             </para>
            </summary>
            <returns>
             IAnimalSpecies representing the Species of the creature this state represents.
            </returns>
        </member>
        <member name="P:OrganismBase.AnimalState.RotTicks">
            <summary>
             <para>
              Provides the number of ticks a particular corpse has been rotting for.
              This is useful to determine whether a corpse will be around long
              enough to be used for food.
             </para>
             <para>
              Under normal circumstances a corpse will remain for 100 ticks.  However,
              this number may be shortened if the machine is under load and many
              creatures are dying from sickness.
             </para>
            </summary>
            <returns>
             System.Int32 representing the number of ticks the creature has been dead.
            </returns>
        </member>
        <member name="P:OrganismBase.AnimalState.PercentInjured">
            <summary>
             <para>
              Provides the percentage of damage taken versus total allowed damage
              before the creature is killed.  This is useful in calculating which
              creature makes the best target due to weakness.
             </para>
            </summary>
            <returns>
             System.Double decimal percentage of total injury.  0 Representing maximum
             health and 1 representing death.
            </returns>
        </member>
        <member name="P:OrganismBase.AnimalState.PreviousDisplayAction">
            <internal/>
        </member>
        <member name="P:OrganismBase.AnimalState.Damage">
            <summary>
             <para>
              Provides the absolute amount of damage an organism has sustained.
              Normally PercentInjured is more useful for determining how badly
              hurt your creature is, but this absolute number can be used for
              different types of calculations.
             </para>
             <para>
              Some useful applications include examining the damage taken each
              tick, determining which creature has the MOST damage, not the highest
              percentage of damage.  Determining if your creature can sustain a hit
              from another creature without dying.  Determining a creature's
              statistical chance of winning a fight, along with updating this chance
              each round.  Each of these can be done using the Damage property, but
              not the PercentInjured property.
             </para>
            </summary>
            <returns>
             System.Int32 representing the absolute amount of damage taken.
            </returns>
        </member>
        <member name="T:OrganismBase.PlantState">
            <summary>
             <para>
              Represents a plant's state during a certain tick in time.  This
              class provides information on how much damage the plant has taken,
              how much energy it has left, and how tall it is.
             </para>
             <para>
              For additional information you should look at the OrganismState
              class which provides information that is shared between the
              Plant/Animal states.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PlantState.optimalLightPercentage">
            <summary>
             This is incomplete, this should be a characteristic that enables
             creatures to determine how much light they need to obtain maximum
             energy per tick.  This can be used to create trees that require
             lots of light or moss that requires very little.
            </summary>
        </member>
        <member name="F:OrganismBase.PlantState.heightToRadiusRatio">
            <summary>
             Determines how high a plant is compared to its base.  This can be
             used to make squatty plants or tall plants.  This is currently not
             used.  Height could be derived from this ratio, and it should probably
             be made into a characteristic.
            </summary>
        </member>
        <member name="F:OrganismBase.PlantState.height">
            <summary>
             The height of the plant.  This is unimplemented, but could be used
             for differentiation between things like trees, grass, and shrubs.
            </summary>
        </member>
        <member name="M:OrganismBase.PlantState.#ctor(System.String,OrganismBase.ISpecies,System.Int32)">
            <summary>
             Creates a brand new state object for a plant.
            </summary>
            <internal/>
        </member>
        <member name="M:OrganismBase.PlantState.CloneMutable">
            <summary>
             Clones the current plant state while resetting the immutability attribute
             so that the new state can be updated with new information.
            </summary>
            <returns>An newly mutable OrganismState that can be casted to a PlantState.</returns>
            <internal/>
        </member>
        <member name="M:OrganismBase.PlantState.CopyStateInto(OrganismBase.OrganismState)">
            <summary>
             Copies the value of the current state into a new state object.
             Used by the CloneMutable method to make mutable copies of state
             objects.
            </summary>
            <param name="newInstance">The new state object that will hold the values.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.PlantState.GiveEnergy(System.Int32)">
            <summary>
            The amount of energy a plant gets decreases linearly as you get away from the optimal
            </summary>
            <param name="availableLightPercentage">The amount of light available to give to this plant.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.PlantState.IncreaseRadiusTo(System.Int32)">
            <summary>
             Increases the radius of the creature to a new radius.  The game
             engine calls this whenever a plant grows.  Since plants have
             other attributes that change the base implementation of this
             method must be overriden to also update the foodChunks property.
            </summary>
            <param name="newRadius">The new radius of the creature.</param>
            <internal/>
        </member>
        <member name="M:OrganismBase.PlantState.Grow">
            <summary>
             Used by the game engine in order to grow a creature.  This attempts
             to grow the creature's radius by one unit.  It makes a copy of the
             organism state rather than modifying it directly since the size and
             location properties might be immutable.
            </summary>
            <returns>
             A new organism state object, since the old object might have had
             a locked state that couldn't be modified in size.
            </returns>
            <internal/>
        </member>
        <member name="M:OrganismBase.PlantState.HealDamage">
            <summary>
             Plants heal just by getting their foodchunks back up to the maximum level -- kind of
             like growing their old leaves back.  This should only be called by the game engine
             and so the method is protected by the immutable property.
            </summary>
            <internal/>
        </member>
        <member name="P:OrganismBase.PlantState.Height">
            <summary>
             <para>
              Returns the height of the plant.
             </para>
            </summary>
            <returns>
             System.Int32 representing the height of the plant.
            </returns>
        </member>
        <member name="P:OrganismBase.PlantState.CurrentMaxFoodChunks">
            <summary>
             <para>
              Returns the number of food chunks this plant represents if
              it hasn't taken any damage.  This along with the PercentInjured
              property can be used to compute the total remaining food chunks
              for a plant.
             </para>
            </summary>
            <returns>
             System.Int32 representing the maximum food chunks the plant can hold.
            </returns>
        </member>
        <member name="P:OrganismBase.PlantState.PercentInjured">
            <summary>
             <para>
              Returns the amount of defoliation this plant has lived through.
              This is a percentage total with 100 representing a full defoliated
              or dead plant, and 0 representing a fully healthy plant.
             </para>
            </summary>
            <returns>
             System.Double representing the percentage of defoliation on a plant.
            </returns>
        </member>
        <member name="T:OrganismBase.AnimalSkinFamily">
            <summary>
             <para>
              Used by the AnimalSkin attribute.  Similar to a "font family" in windows,
              this enum specifies which family of skins to use when displaying an
              creature whose custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinFamily.Ant">
            <summary>
             <para>
              Use the Ant skin if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinFamily.Beetle">
            <summary>
             <para>
              Use the Beetle skin if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinFamily.Spider">
            <summary>
             <para>
              Use the Spider skin if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinFamily.Inchworm">
            <summary>
             <para>
              Use the Inchworm skin if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AnimalSkinFamily.Scorpion">
            <summary>
             <para>
              Use the Scorpion skin if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.AntennaPosition">
            <summary>
             <para>
              Provides the various positions that the LeftAntenna and RightAntenna
              may be in.  Values outside of the allowable range are thrown away
              and will always default to AntennaPosition.Left.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.Left">
            <summary>
             <para>
              The Antenna will be facing Left, this demonstrates a numeric value
              of 0 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.Right">
            <summary>
             <para>
              The Antenna will be facing Right, this demonstrates a numeric value
              of 1 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.Top">
            <summary>
             <para>
              The Antenna will be facing Up, this demonstrates a numeric value
              of 2 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.Bottom">
            <summary>
             <para>
              The Antenna will be facing Down, this demonstrates a numeric value
              of 3 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.UpperLeft">
            <summary>
             <para>
              The Antenna will be facing to the Upper Left, this demonstrates a numeric value
              of 4 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.UpperRight">
            <summary>
             <para>
              The Antenna will be facing to the Upper Right, this demonstrates a numeric value
              of 5 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.BottomLeft">
            <summary>
             <para>
              The Antenna will be facing to the Bottom Left, this demonstrates a numeric value
              of 6 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.BottomRight">
            <summary>
             <para>
              The Antenna will be facing to the Bottom Right, this demonstrates a numeric value
              of 7 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.Forward">
            <summary>
             <para>
              The Antenna will be facing Forward, this demonstrates a numeric value
              of 8 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.AntennaPosition.Backward">
            <summary>
             <para>
              The Antenna will be facing Backward, this demonstrates a numeric value
              of 9 when using the AntennaValue property of AntennaState.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.DisplayAction">
            <summary>
             Used to determine what the most prominent completed
             action for the previous tick was.  This is used by
             the rendering engine to decide which animation should
             be used.  Note that the values of the enumeration were
             initially set to enable quick render processing, but
             the values are now much less important.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Attacked">
            <summary>
             The creature attacked.  This happens quite a bit and is
             a very prominent display action.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Defended">
            <summary>
             The creature defended.  This also hapens quite a bit
             and is a very prominent display action.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Dead">
            <summary>
             The creature was dead in the previous tick and is still
             dead.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Died">
            <summary>
             The creature died in the previous tick and the dying
             animation should be performed if there is one.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Ate">
            <summary>
             The creature was eating in the previous tick.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Moved">
            <summary>
             The creature was moving in the previous tick.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.NoAction">
            <summary>
             The creature was not performing any actions.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Teleported">
            <summary>
             The creature was teleporting in the previous
             tick.  This could be used for a great teleportation
             animation if one existed.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.DisplayAction.Reproduced">
            <summary>
             The creature was reproducing in the previous
             tick.  The animation for reproduction should be
             shown if there is one.
            </summary>
            <internal/>
        </member>
        <member name="T:OrganismBase.EnergyState">
            <summary>
             <para>
              Contains the different energy levels a creature goes through from Full
              to Dead.  Normal represents the desired energy state for most creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EnergyState.Dead">
            <summary>
             <para>
              The creature has no energy at this point and can't sustain existence.
              A creature that reaches this state will die due to Starvation.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EnergyState.Deterioration">
            <summary>
             <para>
              The creature has little energy and will soon die from Starvation.
              When a creature reaches this point it should quickly find some food.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EnergyState.Hungry">
            <summary>
             <para>
              The creature is starting to get low on energy.  Most creatures should
              look for food at this point if they aren't already.  Any Herbivore that
              is at Hungry or below is capable of unprovoked attacks on other creatures.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EnergyState.Normal">
            <summary>
             <para>
              This is the desired energy zone for most creatures.  This is the point
              where creatures can heal themselves, grow, and reproduce.  Creatures
              have plenty of energy at this point, but can still eat and obtain higher
              energy levels.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.EnergyState.Full">
            <summary>
             <para>
              The creature has more than enough energy and can no longer eat.  This
              state can't be maintained for very long and the creature will soon slip
              back into the normal range again.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.PlantSkinFamily">
            <summary>
             <para>
              Used by the PlantSkin attribute.  Similar to a font family,
              this enum specifies which family of skins to use when displaying an
              creature whose custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PlantSkinFamily.Plant">
            <summary>
             <para>
              Use the Plant skin (grass number 1) if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PlantSkinFamily.PlantOne">
            <summary>
             <para>
              Use the PlantOne skin (grass number 1) if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PlantSkinFamily.PlantTwo">
            <summary>
             <para>
              Use the PlantTwo skin (grass number 2) if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PlantSkinFamily.PlantThree">
            <summary>
             <para>
              Use the PlantThree skin (grass number 3) if the custom skin can't be loaded.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.PopulationChangeReason">
            <summary>
             <para>
              Describes the reason for the death of a creature.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.NotDead">
            <summary>
             <para>
              The creature is not dead yet.  This will be returned
              by all creatures that are alive in the Terrarium and
              is a place holder to represent an undead state.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Initial">
            <summary>
             Represents initial population changes instituted
             whenever the game state is deserialized.  These
             creatures were not added to the game, but were
             pre-existing.  When creating new reporting data
             this has to be remembered.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Born">
            <summary>
             The creature was added to the population through
             birth.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.OldAge">
            <summary>
             <para>
              The creature died from old age.  This happens once
              a creature has lived out its entire lifespan.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.TeleportedTo">
            <summary>
             The creature was removed from the engine because it
             was teleported to another peer.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Starved">
            <summary>
             <para>
              The creature died do to starvation.  If a creature
              runs completely out of energy then they are considered
              starved.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Sick">
            <summary>
             <para>
              The creature is not dead yet.  This will be returned
              by all creatures that are alive in the Terrarium and
              is a place holder to represent an undead state.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.TeleportedFrom">
            <summary>
             The creature was added to the engine because it was
             successfully received from another peer.
            </summary>
            <internal/>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Killed">
            <summary>
             <para>
              The creature was killed by the attack of another
              creature.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Error">
            <summary>
             <para>
              The creature threw an exception and was terminated.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.SecurityViolation">
            <summary>
             <para>
              The creature performed an action that violated terrarium
              security.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.Timeout">
            <summary>
             <para>
              The creature used too much of a timeslice and was
              timed out.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.PopulationChangeReason.OrganismBlacklisted">
            <summary>
             The creature was removed from the game engine because
             it was blacklisted by the hosting code due to a malicious
             timeout.
            </summary>
            <internal/>
        </member>
        <member name="T:OrganismBase.ReasonForStop">
            <summary>
             <para>
              Defines the various reasons a creature can be stopped.
              This is currently either DestinationReached or Blocked.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.ReasonForStop.DestinationReached">
            <summary>
             <para>
              Your creature has arrived at the destination used
              in the call to BeginMoving.  During the traversal
              of the game area no other creatures or blocking
              items were encountered.
             </para>
            </summary>
        </member>
        <member name="F:OrganismBase.ReasonForStop.Blocked">
            <summary>
             <para>
              Your creature was blocked from reaching its destination
              by another creature.  This could either be a plant/inanimate
              object, or another moving creature.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.IAnimalSpecies">
            <summary>
             <para>
              Species information properties that are applicable only to animals
              and that should be made available to developers.  Use this to find
              out general information about a particular animal species' capabilities.
             </para>
            </summary>
        </member>
        <member name="T:OrganismBase.ISpecies">
            <summary>
             <para>
              This interface holds all species related information that is
              common to both plants and animals.  Creature developers can access
              all of this information by using the Species property of an OrganismState
              object.
             </para>
             <para>
              All species information is immutable.  A creature's species represents
              its basic capabilities such as the mature size, time between growth
              spurts, and the life span.
             </para>
            </summary>
        </member>
        <member name="M:OrganismBase.ISpecies.IsSameSpecies(OrganismBase.ISpecies)">
            <summary>
             <para>
              Used to determine if a creature with the given Species information is the
              same as another creature given their Species information.  This is useful
              for assessing and remembering the strengths/weaknesses of other creatures.
             </para>
            </summary>
            <param name="species">
             ISpecies interface for the creature to be compared with this creature.
            </param>
            <returns>
             True if the creature's species information is the same, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.ISpecies.MatureRadius">
            <summary>
             <para>
              The maximum radius that a creature can achieve once
              they are fully matured.  Once a creature has fully
              matured they may perform additional actions such
              as reproduction, while others actions cease such
              as growth.
             </para>
            </summary>
            <returns>
             System.Int32 representing the radius of the creature when fully mature.
            </returns>
        </member>
        <member name="P:OrganismBase.ISpecies.ReproductionWait">
            <summary>
             <para>
              The amount of time in ticks a creature must wait between reproductions.
              Creatures can normally reproduce more than once in a lifetime,
              so the time limit between reproduction and the life span of the
              creature are used to define the maximum number of reproductions.
             </para>
             <para>
              Each tick ReproductionWait will drop by one.  Once the ReproductionWait
              reaches 0 one of the requirements the CanReproduce property will be met.
              Once a creature is capable of reproducing a call to BeginReproduction
              must be made to start incubation.
             </para>
            </summary>
            <returns>
             System.Int32 representing the number of ticks between reproductions.
            </returns>
        </member>
        <member name="P:OrganismBase.ISpecies.LifeSpan">
            <summary>
             <para>
              The amount of time in ticks a creature is capable of living.  Once
              the creature reaches the full lifespan of the species it is killed
              with the reason PopulationChangeReason.OldAge.
             </para>
            </summary>
            <returns>
             System.Int32 representing the number of ticks a creature can live.
            </returns>
        </member>
        <member name="P:OrganismBase.ISpecies.GrowthWait">
            <summary>
             <para>
              The amount of time in ticks a creature must wait before growing
              another unit of radius in size.  The initial GrowthWait is defined in
              such a way that a creature will reach full size or MatureRadius
              after one half of the LifeSpan.
             </para>
             <para>
              Each tick GrowthWait will drop by one.  Once the GrowthWait reaches 0
              the creature will grow if it meets all growth requirements.  Growth
              will happen automatically as long as the requirements for growth have
              been met.
             </para>
            </summary>
            <returns>
             System.Int32 representing the number of ticks before a creature can grow.
            </returns>
        </member>
        <member name="P:OrganismBase.ISpecies.MaximumEnergyPerUnitRadius">
            <summary>
             <para>
              The maximum amount of energy a creature can store for every unit of Radius
              it has grown.  This allows larger creatures to store more energy than
              smaller creatures.
             </para>
            </summary>
            <returns>
             System.Int32 representing the maximum amount of energy a creature can store per unit radius.
            </returns>
        </member>
        <member name="P:OrganismBase.ISpecies.Skin">
            <summary>
             <para>
              Returns the Skin the creature will use when being displayed in the Terrarium.
             </para>
            </summary>
            <returns>
             System.String identifying the creature's skin.
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.SkinFamily">
            <summary>
             <para>
              Returns the SkinFamily the creature will use when being displayed in the Terrarium.
             </para>
            </summary>
            <returns>
             System.String identifying the creature's skin family.
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.IsCarnivore">
            <summary>
             <para>
              Determines if a creature is a Carnivore.
             </para>
            </summary>
            <returns>
             True if the creature is a Carnivore, False otherwise.
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.EatingSpeedPerUnitRadius">
            <summary>
             <para>
              The number of food chunks a creature can eat in one tick
              per unit Radius.  This means larger creatures can eat more
              than smaller creatures in one tick.
             </para>
            </summary>
            <returns>
             System.Int32 representing the food chunks that can be eaten per tick per unit radius.
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.MaximumAttackDamagePerUnitRadius">
            <summary>
             <para>
              The maximum amount of damage that can be inflicted by a creature
              in a single tick per unit radius.  This means larger creatures can
              attack harder than smaller creatures per tick.
             </para>
            </summary>
            <returns>
             System.Int32 representing the maximum damage that can be inflicted per unit radius
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.MaximumDefendDamagePerUnitRadius">
            <summary>
             <para>
              The maximum amount of damage that can be absorbed by a creature
              in a single tick per unit radius.  This means larger creatures can
              defend better than smaller creatures per tick.
             </para>
            </summary>
            <returns>
             System.Int32 representing the maximum damage that can be absorbed per unit radius
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.MaximumSpeed">
            <summary>
             <para>
              The maximum speed the creature is capable of moving.
             </para>
            </summary>
            <returns>
             System.Int32 representing the maximum speed the creature is capable of moving.
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.InvisibleOdds">
            <summary>
             <para>
              The odds that a creature is invisible to another creature that uses the
              Scan method.
             </para>
            </summary>
            <returns>
             System.Int32 representing the odds a creature will appear invisible.
            </returns>
        </member>
        <member name="P:OrganismBase.IAnimalSpecies.EyesightRadius">
            <summary>
             <para>
              The distance that a creature can see.  This is used to determine the amount
              of area to be evaluated in a call to the Scan method.
             </para>
            </summary>
            <returns>
             System.Int32 representing the distance a creature can see.
            </returns>
        </member>
        <member name="T:OrganismBase.IAnimalWorldBoundary">
            <summary>
             This class represents an Animal's view of the world.  An interface is
             used because the creature needs something to link against, while the
             actual object exists within the Terrarium Client executable.
            </summary>
        </member>
        <member name="T:OrganismBase.IOrganismWorldBoundary">
            <summary>
             Represents the view available to an organism.
            </summary>
        </member>
        <member name="P:OrganismBase.IOrganismWorldBoundary.CurrentOrganismState">
            <summary>
             Gets the most up to date state object for the current
             creature.
            </summary>
        </member>
        <member name="P:OrganismBase.IOrganismWorldBoundary.ID">
            <summary>
             Retrieves the organism ID representing your creature within the world.
            </summary>
        </member>
        <member name="P:OrganismBase.IOrganismWorldBoundary.WorldWidth">
            <summary>
             Returns the width of the world in game units (pixels);
            </summary>
        </member>
        <member name="P:OrganismBase.IOrganismWorldBoundary.WorldHeight">
            <summary>
             Returns the height of the world in game units (pixels).
            </summary>
        </member>
        <member name="M:OrganismBase.IAnimalWorldBoundary.Scan">
            <summary>
             Provides a method for the creature to scan the surrounding area
             and discover both hidden and visible creatures within your site
             range.
            </summary>
        </member>
        <member name="M:OrganismBase.IAnimalWorldBoundary.LookFor(OrganismBase.OrganismState)">
            <summary>
             Used to look for a creature given an organism state.  The organism
             state can be stale, and the LookFor function will attempt to return
             an updated state for the latest tick.
            </summary>
        </member>
        <member name="M:OrganismBase.IAnimalWorldBoundary.LookForNoCamouflage(OrganismBase.OrganismState)">
            <internal/>
        </member>
        <member name="M:OrganismBase.IAnimalWorldBoundary.RefreshState(System.String)">
            <summary>
             Used to look for a creature given an organism ID.  If the creature
             is visible the state will be returned.  If not null should be
             returned.
            </summary>
        </member>
        <member name="P:OrganismBase.IAnimalWorldBoundary.CurrentAnimalState">
            <summary>
             Retrieves the current state of a creature within the world.  This
             state will be immutable and can't be changed, and actually represents
             an animal state for the previous tick and not the currently executed
             tick.
            </summary>
        </member>
        <member name="T:OrganismBase.IPlantSpecies">
            <summary>
             <para>
              Species information properties that are applicable only to plants
              and that should be made available to developers.  Use this to find
              out general information about a particular plant species' capabilities.
             </para>
            </summary>
        </member>
        <member name="P:OrganismBase.IPlantSpecies.SkinFamily">
            <summary>
             <para>
              Returns the SkinFamily the creature will use when being displayed in the Terrarium.
             </para>
            </summary>
            <returns>
             System.String identifying the creature's skin family.
            </returns>
        </member>
        <member name="T:OrganismBase.IPlantWorldBoundary">
            <summary>
             Represents a plant's view of the world.
            </summary>
        </member>
        <member name="P:OrganismBase.IPlantWorldBoundary.CurrentPlantState">
            <summary>
             Retrieves the most up to date plant state for the current
             plant.
            </summary>
        </member>
    </members>
</doc>
